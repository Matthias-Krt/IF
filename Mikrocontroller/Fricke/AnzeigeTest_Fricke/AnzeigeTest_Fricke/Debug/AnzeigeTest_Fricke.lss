
AnzeigeTest_Fricke.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000202  00000296  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000202  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800122  00800122  000002b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000082f  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ef  00000000  00000000  00000b87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000032f  00000000  00000000  00001276  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000006c  00000000  00000000  000015a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ed  00000000  00000000  00001614  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000189  00000000  00000000  00001a01  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001b8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e0       	ldi	r30, 0x02	; 2
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e2       	ldi	r26, 0x22	; 34
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 32       	cpi	r26, 0x23	; 35
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c8 00 	call	0x190	; 0x190 <main>
  9e:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_14>:
							 0x00, 0x80, 0x00, 0x0C, 0x4C, 0x44, 0x08, 0x08};
unsigned char hex = 1;
unsigned char zahl = 0;
	
ISR(TIMER0_COMPA_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
  b8:	ef 93       	push	r30
  ba:	ff 93       	push	r31
	static unsigned char stelle = 0x10;	//PD4 -> Einerstelle
	unsigned char zind;
	PORTD = PORTD & 0xCF;				//PD4 = PD5 = 0
  bc:	8b b1       	in	r24, 0x0b	; 11
  be:	8f 7c       	andi	r24, 0xCF	; 207
  c0:	8b b9       	out	0x0b, r24	; 11
	if(stelle == 0x10)
  c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  c6:	80 31       	cpi	r24, 0x10	; 16
  c8:	c9 f4       	brne	.+50     	; 0xfc <__vector_14+0x56>
	{	
		if(hex)
  ca:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hex>
  ce:	88 23       	and	r24, r24
  d0:	21 f0       	breq	.+8      	; 0xda <__vector_14+0x34>
			zind = zahl & 0x0F;
  d2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
  d6:	8f 70       	andi	r24, 0x0F	; 15
  d8:	23 c0       	rjmp	.+70     	; 0x120 <__vector_14+0x7a>
		else
			zind = zahl % 10;
  da:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <__data_end>
  de:	8d ec       	ldi	r24, 0xCD	; 205
  e0:	28 9f       	mul	r18, r24
  e2:	81 2d       	mov	r24, r1
  e4:	11 24       	eor	r1, r1
  e6:	86 95       	lsr	r24
  e8:	86 95       	lsr	r24
  ea:	86 95       	lsr	r24
  ec:	88 0f       	add	r24, r24
  ee:	98 2f       	mov	r25, r24
  f0:	99 0f       	add	r25, r25
  f2:	99 0f       	add	r25, r25
  f4:	89 0f       	add	r24, r25
  f6:	28 1b       	sub	r18, r24
  f8:	82 2f       	mov	r24, r18
  fa:	12 c0       	rjmp	.+36     	; 0x120 <__vector_14+0x7a>
	}	
	else
	{
		if(hex)
  fc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hex>
 100:	88 23       	and	r24, r24
 102:	29 f0       	breq	.+10     	; 0x10e <__vector_14+0x68>
			zind = zahl >> 4;
 104:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 108:	82 95       	swap	r24
 10a:	8f 70       	andi	r24, 0x0F	; 15
 10c:	09 c0       	rjmp	.+18     	; 0x120 <__vector_14+0x7a>
		else
			zind = zahl / 10;
 10e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 112:	9d ec       	ldi	r25, 0xCD	; 205
 114:	89 9f       	mul	r24, r25
 116:	81 2d       	mov	r24, r1
 118:	11 24       	eor	r1, r1
 11a:	86 95       	lsr	r24
 11c:	86 95       	lsr	r24
 11e:	86 95       	lsr	r24
	}	
	PORTB = (PORTB & 0xF0) | zifferB[zind];
 120:	25 b1       	in	r18, 0x05	; 5
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	20 7f       	andi	r18, 0xF0	; 240
 126:	fc 01       	movw	r30, r24
 128:	ee 5e       	subi	r30, 0xEE	; 238
 12a:	fe 4f       	sbci	r31, 0xFE	; 254
 12c:	30 81       	ld	r19, Z
 12e:	23 2b       	or	r18, r19
 130:	25 b9       	out	0x05, r18	; 5
	PORTD = (PORTD & 0x33) | zifferD[zind];		
 132:	2b b1       	in	r18, 0x0b	; 11
 134:	23 73       	andi	r18, 0x33	; 51
 136:	fc 01       	movw	r30, r24
 138:	ee 5f       	subi	r30, 0xFE	; 254
 13a:	fe 4f       	sbci	r31, 0xFE	; 254
 13c:	90 81       	ld	r25, Z
 13e:	82 2f       	mov	r24, r18
 140:	89 2b       	or	r24, r25
 142:	8b b9       	out	0x0b, r24	; 11
	PORTD = PORTD | stelle;				//Anoden fuer aktuelle Stelle ein
 144:	9b b1       	in	r25, 0x0b	; 11
 146:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 14a:	89 2b       	or	r24, r25
 14c:	8b b9       	out	0x0b, r24	; 11
	stelle = stelle ^ 0x30;				//Bit 4 und 5 von stelle invertieren
 14e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 152:	80 e3       	ldi	r24, 0x30	; 48
 154:	89 27       	eor	r24, r25
 156:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}
 15a:	ff 91       	pop	r31
 15c:	ef 91       	pop	r30
 15e:	9f 91       	pop	r25
 160:	8f 91       	pop	r24
 162:	3f 91       	pop	r19
 164:	2f 91       	pop	r18
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <Disp_init>:

void Disp_init()
{
	DDRB = DDRB | 0x0F;				//PB3..PB0 Ausgaenge fuer Segmente
 170:	84 b1       	in	r24, 0x04	; 4
 172:	8f 60       	ori	r24, 0x0F	; 15
 174:	84 b9       	out	0x04, r24	; 4
	DDRD = DDRD | 0xFC;				//PD7..PD2 Ausgaenge fuer Segmente und Stellen
 176:	8a b1       	in	r24, 0x0a	; 10
 178:	8c 6f       	ori	r24, 0xFC	; 252
 17a:	8a b9       	out	0x0a, r24	; 10
	TCCR0A = 2;						//normal port operation, CTC mode: TOP = OCR0A; Anzeige-Multiplex
 17c:	82 e0       	ldi	r24, 0x02	; 2
 17e:	84 bd       	out	0x24, r24	; 36
	OCR0A = 77;						//15625 Hz / 78 = ca. 200 Hz fuer Anzeige-Multiplex
 180:	9d e4       	ldi	r25, 0x4D	; 77
 182:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0x02;					//Freigabe "Compare Match A"-Interrupt
 184:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	TCCR0B = 5;						//Takt = Systemtakt / 1024 = 15625 Hz
 188:	85 e0       	ldi	r24, 0x05	; 5
 18a:	85 bd       	out	0x25, r24	; 37
	sei();							//Interrupts allgemein freigeben
 18c:	78 94       	sei
 18e:	08 95       	ret

00000190 <main>:


int main(void)
{
	
	Disp_init();
 190:	0e 94 b8 00 	call	0x170	; 0x170 <Disp_init>
		}
		
		_delay_ms(500);
		
		//Hexzahlen anzeigen
		hex = 1;
 194:	91 e0       	ldi	r25, 0x01	; 1
	Disp_init();
	
    while (1) 
    {
		//Dezimalzahlen anzeigen
		hex = 0;
 196:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <hex>
		for (zahl = 0; zahl < 100; zahl++)
 19a:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19e:	2f ef       	ldi	r18, 0xFF	; 255
 1a0:	35 ea       	ldi	r19, 0xA5	; 165
 1a2:	8e e0       	ldi	r24, 0x0E	; 14
 1a4:	21 50       	subi	r18, 0x01	; 1
 1a6:	30 40       	sbci	r19, 0x00	; 0
 1a8:	80 40       	sbci	r24, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <main+0x14>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <main+0x1e>
 1ae:	00 00       	nop
 1b0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 1b4:	8f 5f       	subi	r24, 0xFF	; 255
 1b6:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
 1ba:	84 36       	cpi	r24, 0x64	; 100
 1bc:	80 f3       	brcs	.-32     	; 0x19e <main+0xe>
 1be:	11 c0       	rjmp	.+34     	; 0x1e2 <main+0x52>
 1c0:	2f ef       	ldi	r18, 0xFF	; 255
 1c2:	35 ea       	ldi	r19, 0xA5	; 165
 1c4:	8e e0       	ldi	r24, 0x0E	; 14
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	30 40       	sbci	r19, 0x00	; 0
 1ca:	80 40       	sbci	r24, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <main+0x36>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <main+0x40>
 1d0:	00 00       	nop
		
		_delay_ms(500);
		
		//Hexzahlen anzeigen
		hex = 1;
		for (zahl = 0; zahl < 255; zahl++)
 1d2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 1d6:	8f 5f       	subi	r24, 0xFF	; 255
 1d8:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
 1dc:	8f 3f       	cpi	r24, 0xFF	; 255
 1de:	81 f7       	brne	.-32     	; 0x1c0 <main+0x30>
 1e0:	da cf       	rjmp	.-76     	; 0x196 <main+0x6>
 1e2:	2f ef       	ldi	r18, 0xFF	; 255
 1e4:	39 e6       	ldi	r19, 0x69	; 105
 1e6:	88 e1       	ldi	r24, 0x18	; 24
 1e8:	21 50       	subi	r18, 0x01	; 1
 1ea:	30 40       	sbci	r19, 0x00	; 0
 1ec:	80 40       	sbci	r24, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <main+0x58>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0x62>
 1f2:	00 00       	nop
		}
		
		_delay_ms(500);
		
		//Hexzahlen anzeigen
		hex = 1;
 1f4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <hex>
		for (zahl = 0; zahl < 255; zahl++)
 1f8:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <__data_end>
 1fc:	e1 cf       	rjmp	.-62     	; 0x1c0 <main+0x30>

000001fe <_exit>:
 1fe:	f8 94       	cli

00000200 <__stop_program>:
 200:	ff cf       	rjmp	.-2      	; 0x200 <__stop_program>
