
OneWire_TempSensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  000002f0  00000384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800122  00800122  000003a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c04  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b6  00000000  00000000  00001064  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000059e  00000000  00000000  0000181a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00001db8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041b  00000000  00000000  00001e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005bd  00000000  00000000  0000226f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000282c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ef       	ldi	r30, 0xF0	; 240
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e2       	ldi	r26, 0x22	; 34
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 32       	cpi	r26, 0x23	; 35
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 3a 01 	call	0x274	; 0x274 <main>
  9e:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_14>:
							 0x00, 0x80, 0x00, 0x0C, 0x4C, 0x44, 0x08, 0x08};
unsigned char hex = 1;
unsigned char zahl = 0;
	
ISR(TIMER0_COMPA_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
  b8:	ef 93       	push	r30
  ba:	ff 93       	push	r31
	static unsigned char stelle = 0x10;	//PD4 -> Einerstelle
	unsigned char zind;
	PORTD = PORTD & 0xCF;				//PD4 = PD5 = 0
  bc:	8b b1       	in	r24, 0x0b	; 11
  be:	8f 7c       	andi	r24, 0xCF	; 207
  c0:	8b b9       	out	0x0b, r24	; 11
	if(stelle == 0x10)
  c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  c6:	80 31       	cpi	r24, 0x10	; 16
  c8:	c9 f4       	brne	.+50     	; 0xfc <__vector_14+0x56>
	{	
		if(hex)
  ca:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hex>
  ce:	88 23       	and	r24, r24
  d0:	21 f0       	breq	.+8      	; 0xda <__vector_14+0x34>
			zind = zahl & 0x0F;
  d2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
  d6:	8f 70       	andi	r24, 0x0F	; 15
  d8:	23 c0       	rjmp	.+70     	; 0x120 <__vector_14+0x7a>
		else
			zind = zahl % 10;
  da:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <__data_end>
  de:	8d ec       	ldi	r24, 0xCD	; 205
  e0:	28 9f       	mul	r18, r24
  e2:	81 2d       	mov	r24, r1
  e4:	11 24       	eor	r1, r1
  e6:	86 95       	lsr	r24
  e8:	86 95       	lsr	r24
  ea:	86 95       	lsr	r24
  ec:	88 0f       	add	r24, r24
  ee:	98 2f       	mov	r25, r24
  f0:	99 0f       	add	r25, r25
  f2:	99 0f       	add	r25, r25
  f4:	89 0f       	add	r24, r25
  f6:	28 1b       	sub	r18, r24
  f8:	82 2f       	mov	r24, r18
  fa:	12 c0       	rjmp	.+36     	; 0x120 <__vector_14+0x7a>
	}	
	else
	{
		if(hex)
  fc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hex>
 100:	88 23       	and	r24, r24
 102:	29 f0       	breq	.+10     	; 0x10e <__vector_14+0x68>
			zind = zahl >> 4;
 104:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 108:	82 95       	swap	r24
 10a:	8f 70       	andi	r24, 0x0F	; 15
 10c:	09 c0       	rjmp	.+18     	; 0x120 <__vector_14+0x7a>
		else
			zind = zahl / 10;
 10e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 112:	9d ec       	ldi	r25, 0xCD	; 205
 114:	89 9f       	mul	r24, r25
 116:	81 2d       	mov	r24, r1
 118:	11 24       	eor	r1, r1
 11a:	86 95       	lsr	r24
 11c:	86 95       	lsr	r24
 11e:	86 95       	lsr	r24
	}	
	PORTB = (PORTB & 0xF0) | zifferB[zind];
 120:	25 b1       	in	r18, 0x05	; 5
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	20 7f       	andi	r18, 0xF0	; 240
 126:	fc 01       	movw	r30, r24
 128:	ee 5e       	subi	r30, 0xEE	; 238
 12a:	fe 4f       	sbci	r31, 0xFE	; 254
 12c:	30 81       	ld	r19, Z
 12e:	23 2b       	or	r18, r19
 130:	25 b9       	out	0x05, r18	; 5
	PORTD = (PORTD & 0x33) | zifferD[zind];		
 132:	2b b1       	in	r18, 0x0b	; 11
 134:	23 73       	andi	r18, 0x33	; 51
 136:	fc 01       	movw	r30, r24
 138:	ee 5f       	subi	r30, 0xFE	; 254
 13a:	fe 4f       	sbci	r31, 0xFE	; 254
 13c:	90 81       	ld	r25, Z
 13e:	82 2f       	mov	r24, r18
 140:	89 2b       	or	r24, r25
 142:	8b b9       	out	0x0b, r24	; 11
	PORTD = PORTD | stelle;				//Anoden fuer aktuelle Stelle ein
 144:	9b b1       	in	r25, 0x0b	; 11
 146:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 14a:	89 2b       	or	r24, r25
 14c:	8b b9       	out	0x0b, r24	; 11
	stelle = stelle ^ 0x30;				//Bit 4 und 5 von stelle invertieren
 14e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 152:	80 e3       	ldi	r24, 0x30	; 48
 154:	89 27       	eor	r24, r25
 156:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}
 15a:	ff 91       	pop	r31
 15c:	ef 91       	pop	r30
 15e:	9f 91       	pop	r25
 160:	8f 91       	pop	r24
 162:	3f 91       	pop	r19
 164:	2f 91       	pop	r18
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <Disp_init>:

void Disp_init()
{
	DDRB = DDRB | 0x0F;				//PB3..PB0 Ausgaenge fuer Segmente
 170:	84 b1       	in	r24, 0x04	; 4
 172:	8f 60       	ori	r24, 0x0F	; 15
 174:	84 b9       	out	0x04, r24	; 4
	DDRD = DDRD | 0xFC;				//PD7..PD2 Ausgaenge fuer Segmente und Stellen
 176:	8a b1       	in	r24, 0x0a	; 10
 178:	8c 6f       	ori	r24, 0xFC	; 252
 17a:	8a b9       	out	0x0a, r24	; 10
	TCCR0A = 2;						//normal port operation, CTC mode: TOP = OCR0A; Anzeige-Multiplex
 17c:	82 e0       	ldi	r24, 0x02	; 2
 17e:	84 bd       	out	0x24, r24	; 36
	OCR0A = 77;						//15625 Hz / 78 = ca. 200 Hz fuer Anzeige-Multiplex
 180:	9d e4       	ldi	r25, 0x4D	; 77
 182:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0x02;					//Freigabe "Compare Match A"-Interrupt
 184:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	TCCR0B = 5;						//Takt = Systemtakt / 1024 = 15625 Hz
 188:	85 e0       	ldi	r24, 0x05	; 5
 18a:	85 bd       	out	0x25, r24	; 37
	sei();							//Interrupts allgemein freigeben
 18c:	78 94       	sei
 18e:	08 95       	ret

00000190 <reset>:


uint8_t reset(){
	uint8_t a = 0;

	cli();
 190:	f8 94       	cli
	PORTB &= ~Pinneken;		//auf 0 Ziehen
 192:	2c 98       	cbi	0x05, 4	; 5
	sei();
 194:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	8f e7       	ldi	r24, 0x7F	; 127
 198:	97 e0       	ldi	r25, 0x07	; 7
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <reset+0xa>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <reset+0x10>
 1a0:	00 00       	nop

	_delay_us(480);

	cli();
 1a2:	f8 94       	cli
	PORTB |= Pinneken;		//los lassen
 1a4:	2c 9a       	sbi	0x05, 4	; 5
	sei();
 1a6:	78 94       	sei

	DDRB &= ~(Pinneken);
 1a8:	24 98       	cbi	0x04, 4	; 4
 1aa:	e7 e1       	ldi	r30, 0x17	; 23
 1ac:	f1 e0       	ldi	r31, 0x01	; 1
 1ae:	31 97       	sbiw	r30, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <reset+0x1e>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <reset+0x24>
 1b4:	00 00       	nop

	_delay_us(70);

	cli();
 1b6:	f8 94       	cli
	a = (PINB&(Pinneken));	//lesen
 1b8:	83 b1       	in	r24, 0x03	; 3
	sei();
 1ba:	78 94       	sei
	DDRB |= Pinneken;
 1bc:	24 9a       	sbi	0x04, 4	; 4
 1be:	e7 e6       	ldi	r30, 0x67	; 103
 1c0:	f6 e0       	ldi	r31, 0x06	; 6
 1c2:	31 97       	sbiw	r30, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <reset+0x32>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <reset+0x38>
 1c8:	00 00       	nop
	_delay_us(410);

	return a;
}
 1ca:	80 71       	andi	r24, 0x10	; 16
 1cc:	08 95       	ret

000001ce <write>:


void write(int data){
 1ce:	28 e0       	ldi	r18, 0x08	; 8
 1d0:	30 e0       	ldi	r19, 0x00	; 0
	for(int i=0;i<=7;i++){
		if(data&1){
 1d2:	80 ff       	sbrs	r24, 0
 1d4:	11 c0       	rjmp	.+34     	; 0x1f8 <write+0x2a>

			cli();
 1d6:	f8 94       	cli
			PORTB &= ~(Pinneken);
 1d8:	2c 98       	cbi	0x05, 4	; 5
			sei();
 1da:	78 94       	sei
 1dc:	45 e3       	ldi	r20, 0x35	; 53
 1de:	4a 95       	dec	r20
 1e0:	f1 f7       	brne	.-4      	; 0x1de <write+0x10>
 1e2:	00 00       	nop

			_delay_us(10);

			cli();
 1e4:	f8 94       	cli
			PORTB |=Pinneken;
 1e6:	2c 9a       	sbi	0x05, 4	; 5
			sei();
 1e8:	78 94       	sei
 1ea:	e7 ec       	ldi	r30, 0xC7	; 199
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	31 97       	sbiw	r30, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <write+0x20>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <write+0x26>
 1f4:	00 00       	nop
 1f6:	0c c0       	rjmp	.+24     	; 0x210 <write+0x42>

			_delay_us(50);
		}
		else{

			cli();
 1f8:	f8 94       	cli
			PORTB &= ~(Pinneken);
 1fa:	2c 98       	cbi	0x05, 4	; 5
			sei();
 1fc:	78 94       	sei
 1fe:	ef ee       	ldi	r30, 0xEF	; 239
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	31 97       	sbiw	r30, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <write+0x34>
 206:	00 c0       	rjmp	.+0      	; 0x208 <write+0x3a>
 208:	00 00       	nop

			_delay_us(60);

			cli();
 20a:	f8 94       	cli
			PORTB |=Pinneken;
 20c:	2c 9a       	sbi	0x05, 4	; 5
			sei();
 20e:	78 94       	sei
 210:	f5 e3       	ldi	r31, 0x35	; 53
 212:	fa 95       	dec	r31
 214:	f1 f7       	brne	.-4      	; 0x212 <write+0x44>
 216:	00 00       	nop

			}
		_delay_us(10);
		data=data>>1;
 218:	95 95       	asr	r25
 21a:	87 95       	ror	r24
 21c:	21 50       	subi	r18, 0x01	; 1
 21e:	31 09       	sbc	r19, r1
	return a;
}


void write(int data){
	for(int i=0;i<=7;i++){
 220:	c1 f6       	brne	.-80     	; 0x1d2 <write+0x4>

			}
		_delay_us(10);
		data=data>>1;
	}
}
 222:	08 95       	ret

00000224 <read>:


uint8_t read(){
 224:	28 e0       	ldi	r18, 0x08	; 8
 226:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t data=0;
 228:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t ue=0;				//?bergabevariable
	for(int i=0;i<8;i++)
	{
		data = data>>1;
 22a:	86 95       	lsr	r24

		cli();
 22c:	f8 94       	cli
		PORTB &= ~(Pinneken);		//auf 0 ziehen
 22e:	2c 98       	cbi	0x05, 4	; 5
		sei();
 230:	78 94       	sei
 232:	90 e2       	ldi	r25, 0x20	; 32
 234:	9a 95       	dec	r25
 236:	f1 f7       	brne	.-4      	; 0x234 <read+0x10>

		_delay_us(6);

		cli();
 238:	f8 94       	cli
		PORTB |=Pinneken;			//loslassen
 23a:	2c 9a       	sbi	0x05, 4	; 5
		sei();
 23c:	78 94       	sei
 23e:	e0 e3       	ldi	r30, 0x30	; 48
 240:	ea 95       	dec	r30
 242:	f1 f7       	brne	.-4      	; 0x240 <read+0x1c>

		_delay_us(9);
		DDRB &= ~Pinneken;
 244:	24 98       	cbi	0x04, 4	; 4

		cli();
 246:	f8 94       	cli
		ue+=  (PINB&Pinneken);
 248:	93 b1       	in	r25, 0x03	; 3
		sei();
 24a:	78 94       	sei

		ue = (ue<<3);
		data |= ue;
 24c:	90 71       	andi	r25, 0x10	; 16
 24e:	99 0f       	add	r25, r25
 250:	99 0f       	add	r25, r25
 252:	99 0f       	add	r25, r25
 254:	89 2b       	or	r24, r25
 256:	eb ed       	ldi	r30, 0xDB	; 219
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	31 97       	sbiw	r30, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <read+0x36>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <read+0x3c>
 260:	00 00       	nop
		_delay_us(55);
		ue=0;
		DDRB |= Pinneken;
 262:	24 9a       	sbi	0x04, 4	; 4
 264:	f5 e3       	ldi	r31, 0x35	; 53
 266:	fa 95       	dec	r31
 268:	f1 f7       	brne	.-4      	; 0x266 <read+0x42>
 26a:	00 00       	nop
 26c:	21 50       	subi	r18, 0x01	; 1
 26e:	31 09       	sbc	r19, r1


uint8_t read(){
	uint8_t data=0;
	uint8_t ue=0;				//?bergabevariable
	for(int i=0;i<8;i++)
 270:	e1 f6       	brne	.-72     	; 0x22a <read+0x6>
		DDRB |= Pinneken;
		_delay_us(10);
	}

	return data;
}
 272:	08 95       	ret

00000274 <main>:



int main(void)
{
	Disp_init();
 274:	0e 94 b8 00 	call	0x170	; 0x170 <Disp_init>
	hex = 1;
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <hex>

	DDRB |= Pinneken;
 27e:	24 9a       	sbi	0x04, 4	; 4
	uint8_t msb = 0;


    while (1)
    {
		reset();
 280:	0e 94 c8 00 	call	0x190	; 0x190 <reset>
		write(0xCC);
 284:	8c ec       	ldi	r24, 0xCC	; 204
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 e7 00 	call	0x1ce	; 0x1ce <write>
		write(0x44);
 28c:	84 e4       	ldi	r24, 0x44	; 68
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 e7 00 	call	0x1ce	; 0x1ce <write>

		cli();
 294:	f8 94       	cli
		PORTB |=Pinneken;
 296:	2c 9a       	sbi	0x05, 4	; 5
		sei();
 298:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29a:	2f ef       	ldi	r18, 0xFF	; 255
 29c:	8e e9       	ldi	r24, 0x9E	; 158
 29e:	94 e2       	ldi	r25, 0x24	; 36
 2a0:	21 50       	subi	r18, 0x01	; 1
 2a2:	80 40       	sbci	r24, 0x00	; 0
 2a4:	90 40       	sbci	r25, 0x00	; 0
 2a6:	e1 f7       	brne	.-8      	; 0x2a0 <main+0x2c>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <main+0x36>
 2aa:	00 00       	nop

		_delay_ms(750);
		reset();
 2ac:	0e 94 c8 00 	call	0x190	; 0x190 <reset>

		write(0xCC);
 2b0:	8c ec       	ldi	r24, 0xCC	; 204
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <write>
		write(0xBE);
 2b8:	8e eb       	ldi	r24, 0xBE	; 190
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 e7 00 	call	0x1ce	; 0x1ce <write>
		lsb = read()>>4;
 2c0:	0e 94 12 01 	call	0x224	; 0x224 <read>
 2c4:	c8 2f       	mov	r28, r24
 2c6:	2f ef       	ldi	r18, 0xFF	; 255
 2c8:	89 e6       	ldi	r24, 0x69	; 105
 2ca:	98 e1       	ldi	r25, 0x18	; 24
 2cc:	21 50       	subi	r18, 0x01	; 1
 2ce:	80 40       	sbci	r24, 0x00	; 0
 2d0:	90 40       	sbci	r25, 0x00	; 0
 2d2:	e1 f7       	brne	.-8      	; 0x2cc <main+0x58>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <main+0x62>
 2d6:	00 00       	nop
		_delay_ms(500);
		msb = read()<<4;
 2d8:	0e 94 12 01 	call	0x224	; 0x224 <read>

		zahl = msb|lsb;
 2dc:	c2 95       	swap	r28
 2de:	cf 70       	andi	r28, 0x0F	; 15
 2e0:	82 95       	swap	r24
 2e2:	80 7f       	andi	r24, 0xF0	; 240
 2e4:	8c 2b       	or	r24, r28
 2e6:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
 2ea:	ca cf       	rjmp	.-108    	; 0x280 <main+0xc>

000002ec <_exit>:
 2ec:	f8 94       	cli

000002ee <__stop_program>:
 2ee:	ff cf       	rjmp	.-2      	; 0x2ee <__stop_program>
