
OneWire_TempSensor_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000362  000003f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000362  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800122  00800122  00000418  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000448  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f12  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000081e  00000000  00000000  0000140a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005e8  00000000  00000000  00001c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00002210  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049d  00000000  00000000  00002348  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007a9  00000000  00000000  000027e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002f8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e6       	ldi	r30, 0x62	; 98
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e2       	ldi	r26, 0x22	; 34
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 32       	cpi	r26, 0x23	; 35
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 55 01 	call	0x2aa	; 0x2aa <main>
  9e:	0c 94 af 01 	jmp	0x35e	; 0x35e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_14>:
	
	decimal = temperature[0]&0x0F;
	decimal *= 625;
	
	return digit;
}
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
  b8:	ef 93       	push	r30
  ba:	ff 93       	push	r31
  bc:	8b b1       	in	r24, 0x0b	; 11
  be:	8f 7c       	andi	r24, 0xCF	; 207
  c0:	8b b9       	out	0x0b, r24	; 11
  c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  c6:	80 31       	cpi	r24, 0x10	; 16
  c8:	c9 f4       	brne	.+50     	; 0xfc <__vector_14+0x56>
  ca:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hex>
  ce:	88 23       	and	r24, r24
  d0:	21 f0       	breq	.+8      	; 0xda <__vector_14+0x34>
  d2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
  d6:	8f 70       	andi	r24, 0x0F	; 15
  d8:	23 c0       	rjmp	.+70     	; 0x120 <__vector_14+0x7a>
  da:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <__data_end>
  de:	8d ec       	ldi	r24, 0xCD	; 205
  e0:	28 9f       	mul	r18, r24
  e2:	81 2d       	mov	r24, r1
  e4:	11 24       	eor	r1, r1
  e6:	86 95       	lsr	r24
  e8:	86 95       	lsr	r24
  ea:	86 95       	lsr	r24
  ec:	88 0f       	add	r24, r24
  ee:	98 2f       	mov	r25, r24
  f0:	99 0f       	add	r25, r25
  f2:	99 0f       	add	r25, r25
  f4:	89 0f       	add	r24, r25
  f6:	28 1b       	sub	r18, r24
  f8:	82 2f       	mov	r24, r18
  fa:	12 c0       	rjmp	.+36     	; 0x120 <__vector_14+0x7a>
  fc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hex>
 100:	88 23       	and	r24, r24
 102:	29 f0       	breq	.+10     	; 0x10e <__vector_14+0x68>
 104:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 108:	82 95       	swap	r24
 10a:	8f 70       	andi	r24, 0x0F	; 15
 10c:	09 c0       	rjmp	.+18     	; 0x120 <__vector_14+0x7a>
 10e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 112:	9d ec       	ldi	r25, 0xCD	; 205
 114:	89 9f       	mul	r24, r25
 116:	81 2d       	mov	r24, r1
 118:	11 24       	eor	r1, r1
 11a:	86 95       	lsr	r24
 11c:	86 95       	lsr	r24
 11e:	86 95       	lsr	r24
 120:	25 b1       	in	r18, 0x05	; 5
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	20 7f       	andi	r18, 0xF0	; 240
 126:	fc 01       	movw	r30, r24
 128:	ee 5e       	subi	r30, 0xEE	; 238
 12a:	fe 4f       	sbci	r31, 0xFE	; 254
 12c:	30 81       	ld	r19, Z
 12e:	23 2b       	or	r18, r19
 130:	25 b9       	out	0x05, r18	; 5
 132:	2b b1       	in	r18, 0x0b	; 11
 134:	23 73       	andi	r18, 0x33	; 51
 136:	fc 01       	movw	r30, r24
 138:	ee 5f       	subi	r30, 0xFE	; 254
 13a:	fe 4f       	sbci	r31, 0xFE	; 254
 13c:	90 81       	ld	r25, Z
 13e:	82 2f       	mov	r24, r18
 140:	89 2b       	or	r24, r25
 142:	8b b9       	out	0x0b, r24	; 11
 144:	9b b1       	in	r25, 0x0b	; 11
 146:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 14a:	89 2b       	or	r24, r25
 14c:	8b b9       	out	0x0b, r24	; 11
 14e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 152:	80 e3       	ldi	r24, 0x30	; 48
 154:	89 27       	eor	r24, r25
 156:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 15a:	ff 91       	pop	r31
 15c:	ef 91       	pop	r30
 15e:	9f 91       	pop	r25
 160:	8f 91       	pop	r24
 162:	3f 91       	pop	r19
 164:	2f 91       	pop	r18
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <Disp_init>:
 170:	84 b1       	in	r24, 0x04	; 4
 172:	8f 60       	ori	r24, 0x0F	; 15
 174:	84 b9       	out	0x04, r24	; 4
 176:	8a b1       	in	r24, 0x0a	; 10
 178:	8c 6f       	ori	r24, 0xFC	; 252
 17a:	8a b9       	out	0x0a, r24	; 10
 17c:	82 e0       	ldi	r24, 0x02	; 2
 17e:	84 bd       	out	0x24, r24	; 36
 180:	9d e4       	ldi	r25, 0x4D	; 77
 182:	97 bd       	out	0x27, r25	; 39
 184:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 188:	85 e0       	ldi	r24, 0x05	; 5
 18a:	85 bd       	out	0x25, r24	; 37
 18c:	78 94       	sei
 18e:	08 95       	ret

00000190 <reset>:
 190:	24 9a       	sbi	0x04, 4	; 4
 192:	f8 94       	cli
 194:	2c 98       	cbi	0x05, 4	; 5
 196:	8f e7       	ldi	r24, 0x7F	; 127
 198:	97 e0       	ldi	r25, 0x07	; 7
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <reset+0xa>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <reset+0x10>
 1a0:	00 00       	nop
 1a2:	2c 9a       	sbi	0x05, 4	; 5
 1a4:	24 98       	cbi	0x04, 4	; 4
 1a6:	e7 e1       	ldi	r30, 0x17	; 23
 1a8:	f1 e0       	ldi	r31, 0x01	; 1
 1aa:	31 97       	sbiw	r30, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <reset+0x1a>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <reset+0x20>
 1b0:	00 00       	nop
 1b2:	83 b1       	in	r24, 0x03	; 3
 1b4:	78 94       	sei
 1b6:	e7 e6       	ldi	r30, 0x67	; 103
 1b8:	f6 e0       	ldi	r31, 0x06	; 6
 1ba:	31 97       	sbiw	r30, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <reset+0x2a>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <reset+0x30>
 1c0:	00 00       	nop
 1c2:	80 71       	andi	r24, 0x10	; 16
 1c4:	08 95       	ret

000001c6 <writeBit>:
 1c6:	80 ff       	sbrs	r24, 0
 1c8:	13 c0       	rjmp	.+38     	; 0x1f0 <writeBit+0x2a>
 1ca:	f8 94       	cli
 1cc:	24 9a       	sbi	0x04, 4	; 4
 1ce:	2c 98       	cbi	0x05, 4	; 5
 1d0:	80 e2       	ldi	r24, 0x20	; 32
 1d2:	8a 95       	dec	r24
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <writeBit+0xc>
 1d6:	2c 9a       	sbi	0x05, 4	; 5
 1d8:	95 e3       	ldi	r25, 0x35	; 53
 1da:	9a 95       	dec	r25
 1dc:	f1 f7       	brne	.-4      	; 0x1da <writeBit+0x14>
 1de:	00 00       	nop
 1e0:	78 94       	sei
 1e2:	87 ed       	ldi	r24, 0xD7	; 215
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <writeBit+0x20>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <writeBit+0x26>
 1ec:	00 00       	nop
 1ee:	08 95       	ret
 1f0:	f8 94       	cli
 1f2:	24 9a       	sbi	0x04, 4	; 4
 1f4:	2c 98       	cbi	0x05, 4	; 5
 1f6:	90 e2       	ldi	r25, 0x20	; 32
 1f8:	9a 95       	dec	r25
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <writeBit+0x32>
 1fc:	2c 98       	cbi	0x05, 4	; 5
 1fe:	78 94       	sei
 200:	87 ed       	ldi	r24, 0xD7	; 215
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <writeBit+0x3e>
 208:	00 c0       	rjmp	.+0      	; 0x20a <writeBit+0x44>
 20a:	00 00       	nop
 20c:	08 95       	ret

0000020e <writeByte>:
 20e:	0f 93       	push	r16
 210:	1f 93       	push	r17
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	d8 2f       	mov	r29, r24
 218:	07 e0       	ldi	r16, 0x07	; 7
 21a:	10 e0       	ldi	r17, 0x00	; 0
 21c:	c1 e0       	ldi	r28, 0x01	; 1
 21e:	8d 2f       	mov	r24, r29
 220:	8c 23       	and	r24, r28
 222:	21 f0       	breq	.+8      	; 0x22c <writeByte+0x1e>
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <writeBit>
 22a:	03 c0       	rjmp	.+6      	; 0x232 <writeByte+0x24>
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <writeBit>
 232:	cc 0f       	add	r28, r28
 234:	01 50       	subi	r16, 0x01	; 1
 236:	11 09       	sbc	r17, r1
 238:	91 f7       	brne	.-28     	; 0x21e <writeByte+0x10>
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	1f 91       	pop	r17
 240:	0f 91       	pop	r16
 242:	08 95       	ret

00000244 <readBit>:
 244:	f8 94       	cli
 246:	24 9a       	sbi	0x04, 4	; 4
 248:	2c 98       	cbi	0x05, 4	; 5
 24a:	80 e2       	ldi	r24, 0x20	; 32
 24c:	8a 95       	dec	r24
 24e:	f1 f7       	brne	.-4      	; 0x24c <readBit+0x8>
 250:	24 98       	cbi	0x04, 4	; 4
 252:	e0 e3       	ldi	r30, 0x30	; 48
 254:	ea 95       	dec	r30
 256:	f1 f7       	brne	.-4      	; 0x254 <readBit+0x10>
 258:	83 b1       	in	r24, 0x03	; 3
 25a:	78 94       	sei
 25c:	eb ed       	ldi	r30, 0xDB	; 219
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	31 97       	sbiw	r30, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <readBit+0x1c>
 264:	00 c0       	rjmp	.+0      	; 0x266 <readBit+0x22>
 266:	00 00       	nop
 268:	80 71       	andi	r24, 0x10	; 16
 26a:	08 95       	ret

0000026c <readByte>:
 26c:	ff 92       	push	r15
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	07 e0       	ldi	r16, 0x07	; 7
 278:	10 e0       	ldi	r17, 0x00	; 0
 27a:	d1 e0       	ldi	r29, 0x01	; 1
 27c:	c1 e0       	ldi	r28, 0x01	; 1
 27e:	f1 2c       	mov	r15, r1
 280:	0e 94 22 01 	call	0x244	; 0x244 <readBit>
 284:	88 23       	and	r24, r24
 286:	29 f0       	breq	.+10     	; 0x292 <readByte+0x26>
 288:	fd 2a       	or	r15, r29
 28a:	85 e3       	ldi	r24, 0x35	; 53
 28c:	8a 95       	dec	r24
 28e:	f1 f7       	brne	.-4      	; 0x28c <readByte+0x20>
 290:	00 00       	nop
 292:	cc 0f       	add	r28, r28
 294:	dc 2f       	mov	r29, r28
 296:	01 50       	subi	r16, 0x01	; 1
 298:	11 09       	sbc	r17, r1
 29a:	91 f7       	brne	.-28     	; 0x280 <readByte+0x14>
 29c:	8f 2d       	mov	r24, r15
 29e:	df 91       	pop	r29
 2a0:	cf 91       	pop	r28
 2a2:	1f 91       	pop	r17
 2a4:	0f 91       	pop	r16
 2a6:	ff 90       	pop	r15
 2a8:	08 95       	ret

000002aa <main>:


int main(void)
{
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	cd b7       	in	r28, 0x3d	; 61
 2b0:	de b7       	in	r29, 0x3e	; 62
 2b2:	2c 97       	sbiw	r28, 0x0c	; 12
 2b4:	0f b6       	in	r0, 0x3f	; 63
 2b6:	f8 94       	cli
 2b8:	de bf       	out	0x3e, r29	; 62
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	cd bf       	out	0x3d, r28	; 61
	
	Disp_init();
 2be:	0e 94 b8 00 	call	0x170	; 0x170 <Disp_init>
	hex = 1;
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <hex>
 2c8:	6e 01       	movw	r12, r28
 2ca:	2a e0       	ldi	r18, 0x0A	; 10
 2cc:	c2 0e       	add	r12, r18
 2ce:	d1 1c       	adc	r13, r1
	unsigned char data[12];
	
    while (1) 
    {
		
		reset();
 2d0:	0e 94 c8 00 	call	0x190	; 0x190 <reset>
		writeByte(skipRom);
 2d4:	8c ec       	ldi	r24, 0xCC	; 204
 2d6:	0e 94 07 01 	call	0x20e	; 0x20e <writeByte>
		writeByte(startMeasurement);
 2da:	84 e4       	ldi	r24, 0x44	; 68
 2dc:	0e 94 07 01 	call	0x20e	; 0x20e <writeByte>
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include "Display.h"

void noInterrupts() { cli(); }
 2e0:	f8 94       	cli
		reset();
		writeByte(skipRom);
		writeByte(startMeasurement);
		
		noInterrupts();
		DDRB |= oneWire;		//oneWire = Ausgang
 2e2:	24 9a       	sbi	0x04, 4	; 4
		PORTB |= oneWire;		//oneWire: 1
 2e4:	2c 9a       	sbi	0x05, 4	; 5
#include <util/delay.h>
#include "Display.h"

void noInterrupts() { cli(); }
	
void interrupts() { sei(); }
 2e6:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e8:	3f ef       	ldi	r19, 0xFF	; 255
 2ea:	83 ed       	ldi	r24, 0xD3	; 211
 2ec:	90 e3       	ldi	r25, 0x30	; 48
 2ee:	31 50       	subi	r19, 0x01	; 1
 2f0:	80 40       	sbci	r24, 0x00	; 0
 2f2:	90 40       	sbci	r25, 0x00	; 0
 2f4:	e1 f7       	brne	.-8      	; 0x2ee <main+0x44>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <main+0x4e>
 2f8:	00 00       	nop
		PORTB |= oneWire;		//oneWire: 1
		interrupts();
		
		_delay_ms(1000);		//750ms
		
		reset();
 2fa:	0e 94 c8 00 	call	0x190	; 0x190 <reset>
		writeByte(skipRom);
 2fe:	8c ec       	ldi	r24, 0xCC	; 204
 300:	0e 94 07 01 	call	0x20e	; 0x20e <writeByte>
		writeByte(readScratchpad);
 304:	8e eb       	ldi	r24, 0xBE	; 190
 306:	0e 94 07 01 	call	0x20e	; 0x20e <writeByte>
 30a:	fe 01       	movw	r30, r28
 30c:	31 96       	adiw	r30, 0x01	; 1
 30e:	7f 01       	movw	r14, r30
 310:	8f 01       	movw	r16, r30
		
		for (uint8_t i = 0; i < 9; i++)
		{
			data[i] = readByte();
 312:	0e 94 36 01 	call	0x26c	; 0x26c <readByte>
 316:	f8 01       	movw	r30, r16
 318:	81 93       	st	Z+, r24
 31a:	8f 01       	movw	r16, r30
		
		reset();
		writeByte(skipRom);
		writeByte(readScratchpad);
		
		for (uint8_t i = 0; i < 9; i++)
 31c:	ec 15       	cp	r30, r12
 31e:	fd 05       	cpc	r31, r13
 320:	c1 f7       	brne	.-16     	; 0x312 <main+0x68>
 322:	80 e0       	ldi	r24, 0x00	; 0
		
		uint8_t temp = tempMSB | tempLSB;
		
		for (uint8_t i = 0; i < 9; i++)
		{
			zahl = data[i];
 324:	f7 01       	movw	r30, r14
 326:	91 91       	ld	r25, Z+
 328:	7f 01       	movw	r14, r30
 32a:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <__data_end>
 32e:	ff ef       	ldi	r31, 0xFF	; 255
 330:	23 ed       	ldi	r18, 0xD3	; 211
 332:	30 e3       	ldi	r19, 0x30	; 48
 334:	f1 50       	subi	r31, 0x01	; 1
 336:	20 40       	sbci	r18, 0x00	; 0
 338:	30 40       	sbci	r19, 0x00	; 0
 33a:	e1 f7       	brne	.-8      	; 0x334 <main+0x8a>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <main+0x94>
 33e:	00 00       	nop
			_delay_ms(1000);
			zahl = i;
 340:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
 344:	9f ef       	ldi	r25, 0xFF	; 255
 346:	e3 ec       	ldi	r30, 0xC3	; 195
 348:	f9 e0       	ldi	r31, 0x09	; 9
 34a:	91 50       	subi	r25, 0x01	; 1
 34c:	e0 40       	sbci	r30, 0x00	; 0
 34e:	f0 40       	sbci	r31, 0x00	; 0
 350:	e1 f7       	brne	.-8      	; 0x34a <main+0xa0>
 352:	00 c0       	rjmp	.+0      	; 0x354 <main+0xaa>
 354:	00 00       	nop
		int8_t tempMSB = (data[1] & 0x07) << 4;
		int8_t tempLSB = (data[0] & 0xF0) >> 4;
		
		uint8_t temp = tempMSB | tempLSB;
		
		for (uint8_t i = 0; i < 9; i++)
 356:	8f 5f       	subi	r24, 0xFF	; 255
 358:	89 30       	cpi	r24, 0x09	; 9
 35a:	21 f7       	brne	.-56     	; 0x324 <main+0x7a>
 35c:	b9 cf       	rjmp	.-142    	; 0x2d0 <main+0x26>

0000035e <_exit>:
 35e:	f8 94       	cli

00000360 <__stop_program>:
 360:	ff cf       	rjmp	.-2      	; 0x360 <__stop_program>
