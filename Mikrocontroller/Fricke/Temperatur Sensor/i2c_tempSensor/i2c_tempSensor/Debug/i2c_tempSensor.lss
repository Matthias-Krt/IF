
i2c_tempSensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  0000029a  0000032e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800122  00800122  00000350  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000919  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000072b  00000000  00000000  00000d41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ab  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001918  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fd  00000000  00000000  00001a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000234  00000000  00000000  00001e29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000205d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e9       	ldi	r30, 0x9A	; 154
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e2       	ldi	r26, 0x22	; 34
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 32       	cpi	r26, 0x23	; 35
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 3b 01 	call	0x276	; 0x276 <main>
  9e:	0c 94 4b 01 	jmp	0x296	; 0x296 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <warte>:
{
	PORTC = PORTC | SDA;			//SDA = NACK = 1
	PORTC = PORTC | SCL;			//SCL = 1
	warte();
	PORTC = PORTC & ~SCL;			//SCL = 0
	warte();
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	00 d0       	rcall	.+0      	; 0xac <warte+0x6>
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
  b0:	19 82       	std	Y+1, r1	; 0x01
  b2:	89 81       	ldd	r24, Y+1	; 0x01
  b4:	85 30       	cpi	r24, 0x05	; 5
  b6:	40 f4       	brcc	.+16     	; 0xc8 <warte+0x22>
  b8:	89 81       	ldd	r24, Y+1	; 0x01
  ba:	8a 83       	std	Y+2, r24	; 0x02
  bc:	89 81       	ldd	r24, Y+1	; 0x01
  be:	8f 5f       	subi	r24, 0xFF	; 255
  c0:	89 83       	std	Y+1, r24	; 0x01
  c2:	89 81       	ldd	r24, Y+1	; 0x01
  c4:	85 30       	cpi	r24, 0x05	; 5
  c6:	c0 f3       	brcs	.-16     	; 0xb8 <warte+0x12>
  c8:	0f 90       	pop	r0
  ca:	0f 90       	pop	r0
  cc:	df 91       	pop	r29
  ce:	cf 91       	pop	r28
  d0:	08 95       	ret

000000d2 <i2c_start>:
  d2:	87 b1       	in	r24, 0x07	; 7
  d4:	80 63       	ori	r24, 0x30	; 48
  d6:	87 b9       	out	0x07, r24	; 7
  d8:	88 b1       	in	r24, 0x08	; 8
  da:	80 63       	ori	r24, 0x30	; 48
  dc:	88 b9       	out	0x08, r24	; 8
  de:	0e 94 53 00 	call	0xa6	; 0xa6 <warte>
  e2:	44 98       	cbi	0x08, 4	; 8
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <warte>
  e8:	45 98       	cbi	0x08, 5	; 8
  ea:	0e 94 53 00 	call	0xa6	; 0xa6 <warte>
  ee:	08 95       	ret

000000f0 <i2c_stop>:
  f0:	44 98       	cbi	0x08, 4	; 8
  f2:	0e 94 53 00 	call	0xa6	; 0xa6 <warte>
  f6:	45 9a       	sbi	0x08, 5	; 8
  f8:	0e 94 53 00 	call	0xa6	; 0xa6 <warte>
  fc:	44 9a       	sbi	0x08, 4	; 8
  fe:	0e 94 53 00 	call	0xa6	; 0xa6 <warte>
 102:	08 95       	ret

00000104 <i2c_write>:
 104:	0f 93       	push	r16
 106:	1f 93       	push	r17
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	08 2f       	mov	r16, r24
 10e:	c8 e0       	ldi	r28, 0x08	; 8
 110:	d0 e0       	ldi	r29, 0x00	; 0
 112:	10 e8       	ldi	r17, 0x80	; 128
 114:	80 2f       	mov	r24, r16
 116:	81 23       	and	r24, r17
 118:	11 f4       	brne	.+4      	; 0x11e <i2c_write+0x1a>
 11a:	44 98       	cbi	0x08, 4	; 8
 11c:	01 c0       	rjmp	.+2      	; 0x120 <i2c_write+0x1c>
 11e:	44 9a       	sbi	0x08, 4	; 8
 120:	0e 94 53 00 	call	0xa6	; 0xa6 <warte>
 124:	45 9a       	sbi	0x08, 5	; 8
 126:	0e 94 53 00 	call	0xa6	; 0xa6 <warte>
 12a:	45 98       	cbi	0x08, 5	; 8
 12c:	16 95       	lsr	r17
 12e:	21 97       	sbiw	r28, 0x01	; 1
 130:	89 f7       	brne	.-30     	; 0x114 <i2c_write+0x10>
 132:	0e 94 53 00 	call	0xa6	; 0xa6 <warte>
 136:	3c 98       	cbi	0x07, 4	; 7
 138:	45 9a       	sbi	0x08, 5	; 8
 13a:	0e 94 53 00 	call	0xa6	; 0xa6 <warte>
 13e:	86 b1       	in	r24, 0x06	; 6
 140:	45 98       	cbi	0x08, 5	; 8
 142:	3c 9a       	sbi	0x07, 4	; 7
 144:	82 95       	swap	r24
 146:	81 70       	andi	r24, 0x01	; 1
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	1f 91       	pop	r17
 14e:	0f 91       	pop	r16
 150:	08 95       	ret

00000152 <i2c_read>:
 152:	0f 93       	push	r16
 154:	1f 93       	push	r17
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	3c 98       	cbi	0x07, 4	; 7
 15c:	0e 94 53 00 	call	0xa6	; 0xa6 <warte>
 160:	c8 e0       	ldi	r28, 0x08	; 8
 162:	d0 e0       	ldi	r29, 0x00	; 0
 164:	00 e0       	ldi	r16, 0x00	; 0
 166:	10 e8       	ldi	r17, 0x80	; 128
 168:	45 9a       	sbi	0x08, 5	; 8
 16a:	0e 94 53 00 	call	0xa6	; 0xa6 <warte>
 16e:	34 99       	sbic	0x06, 4	; 6
 170:	01 0f       	add	r16, r17
 172:	45 98       	cbi	0x08, 5	; 8
 174:	0e 94 53 00 	call	0xa6	; 0xa6 <warte>
 178:	16 95       	lsr	r17
 17a:	21 97       	sbiw	r28, 0x01	; 1
 17c:	a9 f7       	brne	.-22     	; 0x168 <i2c_read+0x16>
 17e:	3c 9a       	sbi	0x07, 4	; 7
 180:	80 2f       	mov	r24, r16
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	1f 91       	pop	r17
 188:	0f 91       	pop	r16
 18a:	08 95       	ret

0000018c <__vector_14>:
							 0x00, 0x80, 0x00, 0x0C, 0x4C, 0x44, 0x08, 0x08};
unsigned char hex = 1;
unsigned char zahl = 0;
	
ISR(TIMER0_COMPA_vect)
{
 18c:	1f 92       	push	r1
 18e:	0f 92       	push	r0
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	0f 92       	push	r0
 194:	11 24       	eor	r1, r1
 196:	2f 93       	push	r18
 198:	3f 93       	push	r19
 19a:	8f 93       	push	r24
 19c:	9f 93       	push	r25
 19e:	ef 93       	push	r30
 1a0:	ff 93       	push	r31
	static unsigned char stelle = 0x10;	//PD4 -> Einerstelle
	unsigned char zind;
	PORTD = PORTD & 0xCF;				//PD4 = PD5 = 0
 1a2:	8b b1       	in	r24, 0x0b	; 11
 1a4:	8f 7c       	andi	r24, 0xCF	; 207
 1a6:	8b b9       	out	0x0b, r24	; 11
	if(stelle == 0x10)
 1a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1ac:	80 31       	cpi	r24, 0x10	; 16
 1ae:	c9 f4       	brne	.+50     	; 0x1e2 <__vector_14+0x56>
	{	
		if(hex)
 1b0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hex>
 1b4:	88 23       	and	r24, r24
 1b6:	21 f0       	breq	.+8      	; 0x1c0 <__vector_14+0x34>
			zind = zahl & 0x0F;
 1b8:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 1bc:	8f 70       	andi	r24, 0x0F	; 15
 1be:	23 c0       	rjmp	.+70     	; 0x206 <__vector_14+0x7a>
		else
			zind = zahl % 10;
 1c0:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <__data_end>
 1c4:	8d ec       	ldi	r24, 0xCD	; 205
 1c6:	28 9f       	mul	r18, r24
 1c8:	81 2d       	mov	r24, r1
 1ca:	11 24       	eor	r1, r1
 1cc:	86 95       	lsr	r24
 1ce:	86 95       	lsr	r24
 1d0:	86 95       	lsr	r24
 1d2:	88 0f       	add	r24, r24
 1d4:	98 2f       	mov	r25, r24
 1d6:	99 0f       	add	r25, r25
 1d8:	99 0f       	add	r25, r25
 1da:	89 0f       	add	r24, r25
 1dc:	28 1b       	sub	r18, r24
 1de:	82 2f       	mov	r24, r18
 1e0:	12 c0       	rjmp	.+36     	; 0x206 <__vector_14+0x7a>
	}	
	else
	{
		if(hex)
 1e2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hex>
 1e6:	88 23       	and	r24, r24
 1e8:	29 f0       	breq	.+10     	; 0x1f4 <__vector_14+0x68>
			zind = zahl >> 4;
 1ea:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 1ee:	82 95       	swap	r24
 1f0:	8f 70       	andi	r24, 0x0F	; 15
 1f2:	09 c0       	rjmp	.+18     	; 0x206 <__vector_14+0x7a>
		else
			zind = zahl / 10;
 1f4:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 1f8:	9d ec       	ldi	r25, 0xCD	; 205
 1fa:	89 9f       	mul	r24, r25
 1fc:	81 2d       	mov	r24, r1
 1fe:	11 24       	eor	r1, r1
 200:	86 95       	lsr	r24
 202:	86 95       	lsr	r24
 204:	86 95       	lsr	r24
	}	
	PORTB = (PORTB & 0xF0) | zifferB[zind];
 206:	25 b1       	in	r18, 0x05	; 5
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	20 7f       	andi	r18, 0xF0	; 240
 20c:	fc 01       	movw	r30, r24
 20e:	ee 5e       	subi	r30, 0xEE	; 238
 210:	fe 4f       	sbci	r31, 0xFE	; 254
 212:	30 81       	ld	r19, Z
 214:	23 2b       	or	r18, r19
 216:	25 b9       	out	0x05, r18	; 5
	PORTD = (PORTD & 0x33) | zifferD[zind];		
 218:	2b b1       	in	r18, 0x0b	; 11
 21a:	23 73       	andi	r18, 0x33	; 51
 21c:	fc 01       	movw	r30, r24
 21e:	ee 5f       	subi	r30, 0xFE	; 254
 220:	fe 4f       	sbci	r31, 0xFE	; 254
 222:	90 81       	ld	r25, Z
 224:	82 2f       	mov	r24, r18
 226:	89 2b       	or	r24, r25
 228:	8b b9       	out	0x0b, r24	; 11
	PORTD = PORTD | stelle;				//Anoden fuer aktuelle Stelle ein
 22a:	9b b1       	in	r25, 0x0b	; 11
 22c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 230:	89 2b       	or	r24, r25
 232:	8b b9       	out	0x0b, r24	; 11
	stelle = stelle ^ 0x30;				//Bit 4 und 5 von stelle invertieren
 234:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 238:	80 e3       	ldi	r24, 0x30	; 48
 23a:	89 27       	eor	r24, r25
 23c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}
 240:	ff 91       	pop	r31
 242:	ef 91       	pop	r30
 244:	9f 91       	pop	r25
 246:	8f 91       	pop	r24
 248:	3f 91       	pop	r19
 24a:	2f 91       	pop	r18
 24c:	0f 90       	pop	r0
 24e:	0f be       	out	0x3f, r0	; 63
 250:	0f 90       	pop	r0
 252:	1f 90       	pop	r1
 254:	18 95       	reti

00000256 <Disp_init>:

void Disp_init()
{
	DDRB = DDRB | 0x0F;				//PB3..PB0 Ausgaenge fuer Segmente
 256:	84 b1       	in	r24, 0x04	; 4
 258:	8f 60       	ori	r24, 0x0F	; 15
 25a:	84 b9       	out	0x04, r24	; 4
	DDRD = DDRD | 0xFC;				//PD7..PD2 Ausgaenge fuer Segmente und Stellen
 25c:	8a b1       	in	r24, 0x0a	; 10
 25e:	8c 6f       	ori	r24, 0xFC	; 252
 260:	8a b9       	out	0x0a, r24	; 10
	TCCR0A = 2;						//normal port operation, CTC mode: TOP = OCR0A; Anzeige-Multiplex
 262:	82 e0       	ldi	r24, 0x02	; 2
 264:	84 bd       	out	0x24, r24	; 36
	OCR0A = 77;						//15625 Hz / 78 = ca. 200 Hz fuer Anzeige-Multiplex
 266:	9d e4       	ldi	r25, 0x4D	; 77
 268:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0x02;					//Freigabe "Compare Match A"-Interrupt
 26a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	TCCR0B = 5;						//Takt = Systemtakt / 1024 = 15625 Hz
 26e:	85 e0       	ldi	r24, 0x05	; 5
 270:	85 bd       	out	0x25, r24	; 37
	sei();							//Interrupts allgemein freigeben
 272:	78 94       	sei
 274:	08 95       	ret

00000276 <main>:
#include "Display.h"


int main(void)
{
	Disp_init();
 276:	0e 94 2b 01 	call	0x256	; 0x256 <Disp_init>
	hex = 0;
 27a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <hex>
	
    while (1) 
    {
		i2c_start();
 27e:	0e 94 69 00 	call	0xd2	; 0xd2 <i2c_start>
		i2c_write(0x91);
 282:	81 e9       	ldi	r24, 0x91	; 145
 284:	0e 94 82 00 	call	0x104	; 0x104 <i2c_write>
		zahl = i2c_read();
 288:	0e 94 a9 00 	call	0x152	; 0x152 <i2c_read>
 28c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
		i2c_stop();
 290:	0e 94 78 00 	call	0xf0	; 0xf0 <i2c_stop>
 294:	f4 cf       	rjmp	.-24     	; 0x27e <main+0x8>

00000296 <_exit>:
 296:	f8 94       	cli

00000298 <__stop_program>:
 298:	ff cf       	rjmp	.-2      	; 0x298 <__stop_program>
