
7Segment_Anzeige_Menk.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000000f2  00000166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000779  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d1  00000000  00000000  00000979  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b3  00000000  00000000  0000104a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001300  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003dc  00000000  00000000  00001334  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00001710  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001758  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ef       	ldi	r30, 0xF2	; 242
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 5d 00 	call	0xba	; 0xba <main>
  8e:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <sv1>:
#ifndef SV1_H_
#define SV1_H_

void sv1(uint8_t ausgabe)
{
	DDRB |= 0x3F;						//Richtungsregister PORTB PB0-PB5 auf Ausgang
  96:	94 b1       	in	r25, 0x04	; 4
  98:	9f 63       	ori	r25, 0x3F	; 63
  9a:	94 b9       	out	0x04, r25	; 4
	DDRD |= 0xC0;						//Richtungsregister PORTD PB6 und PB7 auf Ausgang
  9c:	9a b1       	in	r25, 0x0a	; 10
  9e:	90 6c       	ori	r25, 0xC0	; 192
  a0:	9a b9       	out	0x0a, r25	; 10
	
	PORTB = ausgabe;					//Ausgabe LED0-5
  a2:	85 b9       	out	0x05, r24	; 5
	
	if (ausgabe & 0x40)					//Wenn ausgabe an der Stelle 6 = 1
  a4:	86 ff       	sbrs	r24, 6
  a6:	02 c0       	rjmp	.+4      	; 0xac <sv1+0x16>
	{
		PORTD |= (1<<PD6);				//LED6 = HIGH
  a8:	5e 9a       	sbi	0x0b, 6	; 11
  aa:	01 c0       	rjmp	.+2      	; 0xae <sv1+0x18>
	}
	else							
	PORTD &= ~(1<<PD6);					//sonst LED6 = LOW
  ac:	5e 98       	cbi	0x0b, 6	; 11
	
	
	if (ausgabe & 0x80)					//Wenn ausgabe an der Stelle 7 = 1 
  ae:	88 23       	and	r24, r24
  b0:	14 f4       	brge	.+4      	; 0xb6 <sv1+0x20>
	{
		PORTD |= (1<<PD7);				//LED7 = HIGH
  b2:	5f 9a       	sbi	0x0b, 7	; 11
  b4:	08 95       	ret
	}
	
	else
	PORTD &= ~(1<<PD7);					//sonst LED7 = LOW
  b6:	5f 98       	cbi	0x0b, 7	; 11
  b8:	08 95       	ret

000000ba <main>:
		sv1(i);
		_delay_ms(300);
		
		if (i == 0)
		{
			i = 9;
  ba:	c9 e0       	ldi	r28, 0x09	; 9

int main(void)
{
    while (1) 
    {
		sv1(i);
  bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  c0:	0e 94 4b 00 	call	0x96	; 0x96 <sv1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	85 ea       	ldi	r24, 0xA5	; 165
  c8:	9e e0       	ldi	r25, 0x0E	; 14
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x10>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x1a>
  d4:	00 00       	nop
		_delay_ms(300);
		
		if (i == 0)
  d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  da:	81 11       	cpse	r24, r1
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <main+0x28>
		{
			i = 9;
  de:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
		}
		
		i--;
  e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  e6:	81 50       	subi	r24, 0x01	; 1
  e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
  ec:	e7 cf       	rjmp	.-50     	; 0xbc <main+0x2>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
