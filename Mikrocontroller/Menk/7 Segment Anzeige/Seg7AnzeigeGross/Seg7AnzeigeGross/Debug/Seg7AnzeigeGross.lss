
Seg7AnzeigeGross.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000200  00000274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000200  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008b2  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000723  00000000  00000000  00000bde  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000312  00000000  00000000  00001301  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00001614  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fe  00000000  00000000  00001674  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000140  00000000  00000000  00001a72  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001bb2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e0       	ldi	r30, 0x00	; 0
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <main>
  8e:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <soft_serial>:
#include <util/delay.h>

const uint8_t segTbl[15] = {0x77, 0x14, 0xB3, 0xB6, 0xD4, 0xE6, 0xC7, 0x34, 0xF7, 0xF4, 0x77, 0x80, 0xE1, 0x00, 0x08};

void soft_serial(uint8_t data)
{	
  96:	98 e0       	ldi	r25, 0x08	; 8
	//8 Durchgänge -> 8 Bits
	for (uint8_t i = 0; i < 8; i++)
	{
		PORTB &= ~(1<<PB5);		//Clock LOW
  98:	2d 98       	cbi	0x05, 5	; 5
		
		//Vergleich 1. Bit
		if (data & 0b1)
  9a:	80 ff       	sbrs	r24, 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <soft_serial+0xc>
		{
			//1. Bit = 1
			PORTB |= (1<<PB3);	//ser-Pin = 1
  9e:	2b 9a       	sbi	0x05, 3	; 5
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <soft_serial+0xe>
		} else {
			//1. Bit = 0
			PORTB &= ~(1<<PB3);	//ser-Pin = 0
  a2:	2b 98       	cbi	0x05, 3	; 5
		}
		
		PORTB |= (1<<PB5);		//Clock HIGH
  a4:	2d 9a       	sbi	0x05, 5	; 5
		
		data = data >> 1;		//data eine Stelle nach rechts verschieben
  a6:	86 95       	lsr	r24
  a8:	91 50       	subi	r25, 0x01	; 1
const uint8_t segTbl[15] = {0x77, 0x14, 0xB3, 0xB6, 0xD4, 0xE6, 0xC7, 0x34, 0xF7, 0xF4, 0x77, 0x80, 0xE1, 0x00, 0x08};

void soft_serial(uint8_t data)
{	
	//8 Durchgänge -> 8 Bits
	for (uint8_t i = 0; i < 8; i++)
  aa:	b1 f7       	brne	.-20     	; 0x98 <soft_serial+0x2>
		
		PORTB |= (1<<PB5);		//Clock HIGH
		
		data = data >> 1;		//data eine Stelle nach rechts verschieben
	}
}
  ac:	08 95       	ret

000000ae <enableImpuls>:

void enableImpuls()
{
	PORTB |= (1<<PB0);			//Enabled Impulses
  ae:	28 9a       	sbi	0x05, 0	; 5
	PORTB &= ~(1<<PB0);
  b0:	28 98       	cbi	0x05, 0	; 5
  b2:	08 95       	ret

000000b4 <anzeigen>:
}

void anzeigen(uint16_t wert)
{
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	ec 01       	movw	r28, r24
	/*
	soft_serial(segTbl[wert % 1]);				//Nachkommastelle
	enableImpuls();
	*/
	soft_serial(segTbl[wert % 10]);				//Einer
  ba:	9c 01       	movw	r18, r24
  bc:	ad ec       	ldi	r26, 0xCD	; 205
  be:	bc ec       	ldi	r27, 0xCC	; 204
  c0:	0e 94 ef 00 	call	0x1de	; 0x1de <__umulhisi3>
  c4:	96 95       	lsr	r25
  c6:	87 95       	ror	r24
  c8:	96 95       	lsr	r25
  ca:	87 95       	ror	r24
  cc:	96 95       	lsr	r25
  ce:	87 95       	ror	r24
  d0:	9c 01       	movw	r18, r24
  d2:	22 0f       	add	r18, r18
  d4:	33 1f       	adc	r19, r19
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	82 0f       	add	r24, r18
  e4:	93 1f       	adc	r25, r19
  e6:	fe 01       	movw	r30, r28
  e8:	e8 1b       	sub	r30, r24
  ea:	f9 0b       	sbc	r31, r25
  ec:	e0 50       	subi	r30, 0x00	; 0
  ee:	ff 4f       	sbci	r31, 0xFF	; 255
  f0:	80 81       	ld	r24, Z
  f2:	0e 94 4b 00 	call	0x96	; 0x96 <soft_serial>
	enableImpuls();
  f6:	0e 94 57 00 	call	0xae	; 0xae <enableImpuls>
	soft_serial(segTbl[wert % 100 / 10]);		//Zehner
  fa:	9e 01       	movw	r18, r28
  fc:	36 95       	lsr	r19
  fe:	27 95       	ror	r18
 100:	36 95       	lsr	r19
 102:	27 95       	ror	r18
 104:	ab e7       	ldi	r26, 0x7B	; 123
 106:	b4 e1       	ldi	r27, 0x14	; 20
 108:	0e 94 ef 00 	call	0x1de	; 0x1de <__umulhisi3>
 10c:	96 95       	lsr	r25
 10e:	87 95       	ror	r24
 110:	44 e6       	ldi	r20, 0x64	; 100
 112:	48 9f       	mul	r20, r24
 114:	90 01       	movw	r18, r0
 116:	49 9f       	mul	r20, r25
 118:	30 0d       	add	r19, r0
 11a:	11 24       	eor	r1, r1
 11c:	ce 01       	movw	r24, r28
 11e:	82 1b       	sub	r24, r18
 120:	93 0b       	sbc	r25, r19
 122:	9c 01       	movw	r18, r24
 124:	ad ec       	ldi	r26, 0xCD	; 205
 126:	bc ec       	ldi	r27, 0xCC	; 204
 128:	0e 94 ef 00 	call	0x1de	; 0x1de <__umulhisi3>
 12c:	96 95       	lsr	r25
 12e:	87 95       	ror	r24
 130:	96 95       	lsr	r25
 132:	87 95       	ror	r24
 134:	96 95       	lsr	r25
 136:	87 95       	ror	r24
 138:	fc 01       	movw	r30, r24
 13a:	e0 50       	subi	r30, 0x00	; 0
 13c:	ff 4f       	sbci	r31, 0xFF	; 255
 13e:	80 81       	ld	r24, Z
 140:	0e 94 4b 00 	call	0x96	; 0x96 <soft_serial>
	enableImpuls();
 144:	0e 94 57 00 	call	0xae	; 0xae <enableImpuls>
	soft_serial(segTbl[wert % 1000 / 100]);		//Hunderter
 148:	9e 01       	movw	r18, r28
 14a:	36 95       	lsr	r19
 14c:	27 95       	ror	r18
 14e:	36 95       	lsr	r19
 150:	27 95       	ror	r18
 152:	36 95       	lsr	r19
 154:	27 95       	ror	r18
 156:	a5 ec       	ldi	r26, 0xC5	; 197
 158:	b0 e2       	ldi	r27, 0x20	; 32
 15a:	0e 94 ef 00 	call	0x1de	; 0x1de <__umulhisi3>
 15e:	92 95       	swap	r25
 160:	82 95       	swap	r24
 162:	8f 70       	andi	r24, 0x0F	; 15
 164:	89 27       	eor	r24, r25
 166:	9f 70       	andi	r25, 0x0F	; 15
 168:	89 27       	eor	r24, r25
 16a:	48 ee       	ldi	r20, 0xE8	; 232
 16c:	53 e0       	ldi	r21, 0x03	; 3
 16e:	84 9f       	mul	r24, r20
 170:	90 01       	movw	r18, r0
 172:	85 9f       	mul	r24, r21
 174:	30 0d       	add	r19, r0
 176:	94 9f       	mul	r25, r20
 178:	30 0d       	add	r19, r0
 17a:	11 24       	eor	r1, r1
 17c:	ce 01       	movw	r24, r28
 17e:	82 1b       	sub	r24, r18
 180:	93 0b       	sbc	r25, r19
 182:	9c 01       	movw	r18, r24
 184:	36 95       	lsr	r19
 186:	27 95       	ror	r18
 188:	36 95       	lsr	r19
 18a:	27 95       	ror	r18
 18c:	ab e7       	ldi	r26, 0x7B	; 123
 18e:	b4 e1       	ldi	r27, 0x14	; 20
 190:	0e 94 ef 00 	call	0x1de	; 0x1de <__umulhisi3>
 194:	96 95       	lsr	r25
 196:	87 95       	ror	r24
 198:	fc 01       	movw	r30, r24
 19a:	e0 50       	subi	r30, 0x00	; 0
 19c:	ff 4f       	sbci	r31, 0xFF	; 255
 19e:	80 81       	ld	r24, Z
 1a0:	0e 94 4b 00 	call	0x96	; 0x96 <soft_serial>
	enableImpuls();
 1a4:	0e 94 57 00 	call	0xae	; 0xae <enableImpuls>
	/*
	soft_serial(segTbl[wert % 10000 / 1000]);	//Tausender
	enableImpuls();
	*/
}
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <main>:

int main(void)
{
	DDRB |= (1<<PB0) | (1<<PB3) | (1<<PB5);	//enabled = PB0, serial = PB3, clock = PB5; Ausgänge
 1ae:	84 b1       	in	r24, 0x04	; 4
 1b0:	89 62       	ori	r24, 0x29	; 41
 1b2:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1<<PB0);
 1b4:	28 98       	cbi	0x05, 0	; 5
			
			_delay_ms(500);
		}	
		*/
		
		for (uint16_t i = 0; i < 1000; i++)
 1b6:	c0 e0       	ldi	r28, 0x00	; 0
 1b8:	d0 e0       	ldi	r29, 0x00	; 0
		{
			anzeigen(i);
 1ba:	ce 01       	movw	r24, r28
 1bc:	0e 94 5a 00 	call	0xb4	; 0xb4 <anzeigen>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c0:	2f ef       	ldi	r18, 0xFF	; 255
 1c2:	83 ec       	ldi	r24, 0xC3	; 195
 1c4:	99 e0       	ldi	r25, 0x09	; 9
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	80 40       	sbci	r24, 0x00	; 0
 1ca:	90 40       	sbci	r25, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <main+0x18>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <main+0x22>
 1d0:	00 00       	nop
			
			_delay_ms(500);
		}	
		*/
		
		for (uint16_t i = 0; i < 1000; i++)
 1d2:	21 96       	adiw	r28, 0x01	; 1
 1d4:	c8 3e       	cpi	r28, 0xE8	; 232
 1d6:	23 e0       	ldi	r18, 0x03	; 3
 1d8:	d2 07       	cpc	r29, r18
 1da:	79 f7       	brne	.-34     	; 0x1ba <main+0xc>
 1dc:	ec cf       	rjmp	.-40     	; 0x1b6 <main+0x8>

000001de <__umulhisi3>:
 1de:	a2 9f       	mul	r26, r18
 1e0:	b0 01       	movw	r22, r0
 1e2:	b3 9f       	mul	r27, r19
 1e4:	c0 01       	movw	r24, r0
 1e6:	a3 9f       	mul	r26, r19
 1e8:	70 0d       	add	r23, r0
 1ea:	81 1d       	adc	r24, r1
 1ec:	11 24       	eor	r1, r1
 1ee:	91 1d       	adc	r25, r1
 1f0:	b2 9f       	mul	r27, r18
 1f2:	70 0d       	add	r23, r0
 1f4:	81 1d       	adc	r24, r1
 1f6:	11 24       	eor	r1, r1
 1f8:	91 1d       	adc	r25, r1
 1fa:	08 95       	ret

000001fc <_exit>:
 1fc:	f8 94       	cli

000001fe <__stop_program>:
 1fe:	ff cf       	rjmp	.-2      	; 0x1fe <__stop_program>
