
2x7 Seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000019c  00000210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000801  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d8  00000000  00000000  00000abd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000384  00000000  00000000  00001195  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  0000151c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c1  00000000  00000000  00001570  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ff  00000000  00000000  00001931  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001a30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e9       	ldi	r30, 0x9C	; 156
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 8c 00 	call	0x118	; 0x118 <main>
  8e:	0c 94 cc 00 	jmp	0x198	; 0x198 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <sv1>:
#ifndef SV1_H_
#define SV1_H_

void sv1(uint8_t ausgabe)
{
	DDRB |= 0x3F;						//Richtungsregister PORTB PB0-PB5 auf Ausgang
  96:	94 b1       	in	r25, 0x04	; 4
  98:	9f 63       	ori	r25, 0x3F	; 63
  9a:	94 b9       	out	0x04, r25	; 4
	DDRD |= 0xC0;						//Richtungsregister PORTD PB6 und PB7 auf Ausgang
  9c:	9a b1       	in	r25, 0x0a	; 10
  9e:	90 6c       	ori	r25, 0xC0	; 192
  a0:	9a b9       	out	0x0a, r25	; 10
	
	PORTB = ausgabe;					//Ausgabe LED0-5
  a2:	85 b9       	out	0x05, r24	; 5
	
	if (ausgabe & 0x40)					//Wenn ausgabe an der Stelle 6 = 1
  a4:	86 ff       	sbrs	r24, 6
  a6:	02 c0       	rjmp	.+4      	; 0xac <sv1+0x16>
	{
		PORTD |= (1<<PD6);				//LED6 = HIGH
  a8:	5e 9a       	sbi	0x0b, 6	; 11
  aa:	01 c0       	rjmp	.+2      	; 0xae <sv1+0x18>
	}
	else							
	PORTD &= ~(1<<PD6);					//sonst LED6 = LOW
  ac:	5e 98       	cbi	0x0b, 6	; 11
	
	
	if (ausgabe & 0x80)						//Wenn ausgabe an der Stelle 7 = 1 
  ae:	88 23       	and	r24, r24
  b0:	14 f4       	brge	.+4      	; 0xb6 <sv1+0x20>
	{
		PORTD |= (1<<PD7);				//LED7 = HIGH
  b2:	5f 9a       	sbi	0x0b, 7	; 11
  b4:	08 95       	ret
	}
	
	else
	PORTD &= ~(1<<PD7);					//sonst LED7 = LOW
  b6:	5f 98       	cbi	0x0b, 7	; 11
  b8:	08 95       	ret

000000ba <sv2>:
#ifndef SV2_H_
#define SV2_H_

void sv2(uint8_t ausgabe)
{
	DDRD |= (1<<PD5)|(1<<PD4)|(1<<PD3)|(1<<PD2);			//Richtungsregister PORTD PD5-PD2 auf Ausgang
  ba:	9a b1       	in	r25, 0x0a	; 10
  bc:	9c 63       	ori	r25, 0x3C	; 60
  be:	9a b9       	out	0x0a, r25	; 10
	DDRC |= (1<<PC3)|(1<<PC2)|(1<<PC1)|(1<<PC0);			//Richtungsregister PORTC PC3-PC0 auf Ausgang
  c0:	97 b1       	in	r25, 0x07	; 7
  c2:	9f 60       	ori	r25, 0x0F	; 15
  c4:	97 b9       	out	0x07, r25	; 7
	
	if (ausgabe & 0b00000001)			//Wenn ausgabe an der Stelle 0 = 1
  c6:	80 ff       	sbrs	r24, 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <sv2+0x14>
	{
		PORTD |= (1<<PD5);				//LED0 = HIGH
  ca:	5d 9a       	sbi	0x0b, 5	; 11
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <sv2+0x16>
	}
	else
	PORTD &= ~(1<<PD5);					//sonst LED0 = LOW
  ce:	5d 98       	cbi	0x0b, 5	; 11
	
	
	if (ausgabe & 0b00000010)			//Wenn ausgabe an der Stelle 1 = 1
  d0:	81 ff       	sbrs	r24, 1
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <sv2+0x1e>
	{
		PORTD |= (1<<PD4);				//LED1 = HIGH
  d4:	5c 9a       	sbi	0x0b, 4	; 11
  d6:	01 c0       	rjmp	.+2      	; 0xda <sv2+0x20>
	}
	else
	PORTD &= ~(1<<PD4);					//sonst LED1 = LOW
  d8:	5c 98       	cbi	0x0b, 4	; 11
	
	
	if (ausgabe & 0b00000100)			//Wenn ausgabe an der Stelle 2 = 1
  da:	82 ff       	sbrs	r24, 2
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <sv2+0x28>
	{
		PORTD |= (1<<PD3);				//LED2 = HIGH
  de:	5b 9a       	sbi	0x0b, 3	; 11
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <sv2+0x2a>
	}
	else
	PORTD &= ~(1<<PD3);					//sonst LED2 = LOW
  e2:	5b 98       	cbi	0x0b, 3	; 11
	
	
	if (ausgabe & 0b00001000)			//Wenn ausgabe an der Stelle 3 = 1
  e4:	83 ff       	sbrs	r24, 3
  e6:	02 c0       	rjmp	.+4      	; 0xec <sv2+0x32>
	{
		PORTD |= (1<<PD2);				//LED3 = HIGH
  e8:	5a 9a       	sbi	0x0b, 2	; 11
  ea:	01 c0       	rjmp	.+2      	; 0xee <sv2+0x34>
	}
	else
	PORTD &= ~(1<<PD2);					//sonst LED3 = LOW
  ec:	5a 98       	cbi	0x0b, 2	; 11
	
	
	if (ausgabe & 0b00010000)			//Wenn ausgabe an der Stelle 4 = 1
  ee:	84 ff       	sbrs	r24, 4
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <sv2+0x3c>
	{
		PORTC |= (1<<PC0);				//LED4 = HIGH
  f2:	40 9a       	sbi	0x08, 0	; 8
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <sv2+0x3e>
	}
	else
	PORTC &= ~(1<<PC0);					//sonst LED4 = LOW
  f6:	40 98       	cbi	0x08, 0	; 8
	
	
	if (ausgabe & 0b00100000)			//Wenn ausgabe an der Stelle 5 = 1
  f8:	85 ff       	sbrs	r24, 5
  fa:	02 c0       	rjmp	.+4      	; 0x100 <sv2+0x46>
	{
		PORTC |= (1<<PC1);				//LED5 = HIGH
  fc:	41 9a       	sbi	0x08, 1	; 8
  fe:	01 c0       	rjmp	.+2      	; 0x102 <sv2+0x48>
	}
	else
	PORTC &= ~(1<<PC1);					//sonst LED5 = LOW
 100:	41 98       	cbi	0x08, 1	; 8
	
	
	if (ausgabe & 0b01000000)			//Wenn ausgabe an der Stelle 6 = 1
 102:	86 ff       	sbrs	r24, 6
 104:	02 c0       	rjmp	.+4      	; 0x10a <sv2+0x50>
	{
		PORTC |= (1<<PC2);				//LED6 = HIGH
 106:	42 9a       	sbi	0x08, 2	; 8
 108:	01 c0       	rjmp	.+2      	; 0x10c <sv2+0x52>
	}
	else
	PORTC &= ~(1<<PC2);					//sonst LED6 = LOW
 10a:	42 98       	cbi	0x08, 2	; 8
	
	
	if (ausgabe & 0b10000000)			//Wenn ausgabe an der Stelle 7 = 1
 10c:	88 23       	and	r24, r24
 10e:	14 f4       	brge	.+4      	; 0x114 <sv2+0x5a>
	{
		PORTC |= (1<<PC3);				//LED7 = HIGH
 110:	43 9a       	sbi	0x08, 3	; 8
 112:	08 95       	ret
	}
	else
	PORTC &= ~(1<<PC3);					//sonst LED7 = LOW
 114:	43 98       	cbi	0x08, 3	; 8
 116:	08 95       	ret

00000118 <main>:
#include <util/delay.h>
#include "sv1.h"
#include "sv2.h"

int main(void)
{
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
 120:	2b 97       	sbiw	r28, 0x0b	; 11
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	f8 94       	cli
 126:	de bf       	out	0x3e, r29	; 62
 128:	0f be       	out	0x3f, r0	; 63
 12a:	cd bf       	out	0x3d, r28	; 61
	const uint8_t segmente[11] = {0x03, 0xF3, 0x25, 0x0D, 0x99, 0x49, 0x41, 0x1F, 0x01, 0x19, 0xFE};
 12c:	8b e0       	ldi	r24, 0x0B	; 11
 12e:	e0 e0       	ldi	r30, 0x00	; 0
 130:	f1 e0       	ldi	r31, 0x01	; 1
 132:	de 01       	movw	r26, r28
 134:	11 96       	adiw	r26, 0x01	; 1
 136:	01 90       	ld	r0, Z+
 138:	0d 92       	st	X+, r0
 13a:	8a 95       	dec	r24
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0x1e>
 13e:	7e 01       	movw	r14, r28
 140:	2b e0       	ldi	r18, 0x0B	; 11
 142:	e2 0e       	add	r14, r18
 144:	f1 1c       	adc	r15, r1
#include <util/delay.h>
#include "sv1.h"
#include "sv2.h"

int main(void)
{
 146:	ce 01       	movw	r24, r28
 148:	01 96       	adiw	r24, 0x01	; 1
 14a:	6c 01       	movw	r12, r24

    while (1) 
    {
		for (uint8_t z = 0; z < 10; z++)
		{
			sv1(segmente[z]);
 14c:	f6 01       	movw	r30, r12
 14e:	81 91       	ld	r24, Z+
 150:	6f 01       	movw	r12, r30
 152:	0e 94 4b 00 	call	0x96	; 0x96 <sv1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 156:	ff ef       	ldi	r31, 0xFF	; 255
 158:	23 ec       	ldi	r18, 0xC3	; 195
 15a:	89 e0       	ldi	r24, 0x09	; 9
 15c:	f1 50       	subi	r31, 0x01	; 1
 15e:	20 40       	sbci	r18, 0x00	; 0
 160:	80 40       	sbci	r24, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <main+0x44>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0x4e>
 166:	00 00       	nop
 168:	8e 01       	movw	r16, r28
 16a:	0f 5f       	subi	r16, 0xFF	; 255
 16c:	1f 4f       	sbci	r17, 0xFF	; 255
			_delay_ms(200);
			for (uint8_t e = 0; e < 10; e++)
			{
				sv2(segmente[e]);
 16e:	f8 01       	movw	r30, r16
 170:	81 91       	ld	r24, Z+
 172:	8f 01       	movw	r16, r30
 174:	0e 94 5d 00 	call	0xba	; 0xba <sv2>
 178:	ff ef       	ldi	r31, 0xFF	; 255
 17a:	23 ec       	ldi	r18, 0xC3	; 195
 17c:	89 e0       	ldi	r24, 0x09	; 9
 17e:	f1 50       	subi	r31, 0x01	; 1
 180:	20 40       	sbci	r18, 0x00	; 0
 182:	80 40       	sbci	r24, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <main+0x66>
 186:	00 c0       	rjmp	.+0      	; 0x188 <main+0x70>
 188:	00 00       	nop
    {
		for (uint8_t z = 0; z < 10; z++)
		{
			sv1(segmente[z]);
			_delay_ms(200);
			for (uint8_t e = 0; e < 10; e++)
 18a:	0e 15       	cp	r16, r14
 18c:	1f 05       	cpc	r17, r15
 18e:	79 f7       	brne	.-34     	; 0x16e <main+0x56>
{
	const uint8_t segmente[11] = {0x03, 0xF3, 0x25, 0x0D, 0x99, 0x49, 0x41, 0x1F, 0x01, 0x19, 0xFE};

    while (1) 
    {
		for (uint8_t z = 0; z < 10; z++)
 190:	ce 14       	cp	r12, r14
 192:	df 04       	cpc	r13, r15
 194:	d9 f6       	brne	.-74     	; 0x14c <main+0x34>
 196:	d7 cf       	rjmp	.-82     	; 0x146 <main+0x2e>

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>
