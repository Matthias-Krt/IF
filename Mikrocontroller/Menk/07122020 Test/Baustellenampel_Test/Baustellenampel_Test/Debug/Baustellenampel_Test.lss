
Baustellenampel_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000031a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000031a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000034c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c26  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000704  00000000  00000000  0000101a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000462  00000000  00000000  0000171e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000144  00000000  00000000  00001b80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000428  00000000  00000000  00001cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000586  00000000  00000000  000020ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002672  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 01 01 	jmp	0x202	; 0x202 <__vector_1>
   8:	0c 94 31 01 	jmp	0x262	; 0x262 <__vector_2>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <main>
  78:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <sv1>:
#ifndef SV1_H_
#define SV1_H_

void sv1(uint8_t ausgabe)
{
	DDRB |= 0x3F;						//Richtungsregister PORTB PB0-PB5 auf Ausgang
  80:	94 b1       	in	r25, 0x04	; 4
  82:	9f 63       	ori	r25, 0x3F	; 63
  84:	94 b9       	out	0x04, r25	; 4
	DDRD |= 0xC0;						//Richtungsregister PORTD PB6 und PB7 auf Ausgang
  86:	9a b1       	in	r25, 0x0a	; 10
  88:	90 6c       	ori	r25, 0xC0	; 192
  8a:	9a b9       	out	0x0a, r25	; 10
	
	PORTB = ausgabe;					//Ausgabe LED0-5
  8c:	85 b9       	out	0x05, r24	; 5
	
	if (ausgabe & 0x40)					//Wenn ausgabe an der Stelle 6 = 1
  8e:	86 ff       	sbrs	r24, 6
  90:	02 c0       	rjmp	.+4      	; 0x96 <sv1+0x16>
	{
		PORTD |= (1<<PD6);				//LED6 = HIGH
  92:	5e 9a       	sbi	0x0b, 6	; 11
  94:	01 c0       	rjmp	.+2      	; 0x98 <sv1+0x18>
	}
	else							
	PORTD &= ~(1<<PD6);					//sonst LED6 = LOW
  96:	5e 98       	cbi	0x0b, 6	; 11
	
	
	if (ausgabe & 0x80)						//Wenn ausgabe an der Stelle 7 = 1 
  98:	88 23       	and	r24, r24
  9a:	14 f4       	brge	.+4      	; 0xa0 <sv1+0x20>
	{
		PORTD |= (1<<PD7);				//LED7 = HIGH
  9c:	5f 9a       	sbi	0x0b, 7	; 11
  9e:	08 95       	ret
	}
	
	else
	PORTD &= ~(1<<PD7);					//sonst LED7 = LOW
  a0:	5f 98       	cbi	0x0b, 7	; 11
  a2:	08 95       	ret

000000a4 <A2GreenToRed>:
//sv1(0b01000000);	//A2 Gelb
//sv1(0b10000000);	//A2 Gruen

void A2GreenToRed()
{
	sv1(A2Green | A1Red);
  a4:	80 e9       	ldi	r24, 0x90	; 144
  a6:	0e 94 40 00 	call	0x80	; 0x80 <sv1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	85 ea       	ldi	r24, 0xA5	; 165
  ae:	9e e0       	ldi	r25, 0x0E	; 14
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <A2GreenToRed+0xc>
  b8:	00 c0       	rjmp	.+0      	; 0xba <A2GreenToRed+0x16>
  ba:	00 00       	nop
	_delay_ms(300);
	sv1(A2Yellow | A1Red);
  bc:	80 e5       	ldi	r24, 0x50	; 80
  be:	0e 94 40 00 	call	0x80	; 0x80 <sv1>
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	89 e6       	ldi	r24, 0x69	; 105
  c6:	98 e1       	ldi	r25, 0x18	; 24
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <A2GreenToRed+0x24>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <A2GreenToRed+0x2e>
  d2:	00 00       	nop
	_delay_ms(500);
	sv1(A2Red | A1Red);
  d4:	80 e3       	ldi	r24, 0x30	; 48
  d6:	0e 94 40 00 	call	0x80	; 0x80 <sv1>
  da:	08 95       	ret

000000dc <A2RedToGreen>:
}

void A2RedToGreen()
{
	sv1(A2Red | A1Red);
  dc:	80 e3       	ldi	r24, 0x30	; 48
  de:	0e 94 40 00 	call	0x80	; 0x80 <sv1>
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	85 ea       	ldi	r24, 0xA5	; 165
  e6:	9e e0       	ldi	r25, 0x0E	; 14
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <A2RedToGreen+0xc>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <A2RedToGreen+0x16>
  f2:	00 00       	nop
	_delay_ms(300);
	sv1(A2Red | A2Yellow | A1Red);
  f4:	80 e7       	ldi	r24, 0x70	; 112
  f6:	0e 94 40 00 	call	0x80	; 0x80 <sv1>
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	85 ea       	ldi	r24, 0xA5	; 165
  fe:	9e e0       	ldi	r25, 0x0E	; 14
 100:	21 50       	subi	r18, 0x01	; 1
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <A2RedToGreen+0x24>
 108:	00 c0       	rjmp	.+0      	; 0x10a <A2RedToGreen+0x2e>
 10a:	00 00       	nop
	_delay_ms(300);
	sv1(A2Green | A1Red);
 10c:	80 e9       	ldi	r24, 0x90	; 144
 10e:	0e 94 40 00 	call	0x80	; 0x80 <sv1>
 112:	08 95       	ret

00000114 <A1GreenToRed>:
}

void A1GreenToRed()
{
	sv1(A1Green | A2Red);
 114:	81 e2       	ldi	r24, 0x21	; 33
 116:	0e 94 40 00 	call	0x80	; 0x80 <sv1>
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	85 ea       	ldi	r24, 0xA5	; 165
 11e:	9e e0       	ldi	r25, 0x0E	; 14
 120:	21 50       	subi	r18, 0x01	; 1
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <A1GreenToRed+0xc>
 128:	00 c0       	rjmp	.+0      	; 0x12a <A1GreenToRed+0x16>
 12a:	00 00       	nop
	_delay_ms(300);
	sv1(A1Yellow | A2Red);
 12c:	82 e2       	ldi	r24, 0x22	; 34
 12e:	0e 94 40 00 	call	0x80	; 0x80 <sv1>
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	89 e6       	ldi	r24, 0x69	; 105
 136:	98 e1       	ldi	r25, 0x18	; 24
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <A1GreenToRed+0x24>
 140:	00 c0       	rjmp	.+0      	; 0x142 <A1GreenToRed+0x2e>
 142:	00 00       	nop
	_delay_ms(500);
	sv1(A1Red | A2Red);
 144:	80 e3       	ldi	r24, 0x30	; 48
 146:	0e 94 40 00 	call	0x80	; 0x80 <sv1>
 14a:	08 95       	ret

0000014c <A1RedToGreen>:
}

void A1RedToGreen()
{
	sv1(A1Red | A2Red);
 14c:	80 e3       	ldi	r24, 0x30	; 48
 14e:	0e 94 40 00 	call	0x80	; 0x80 <sv1>
 152:	2f ef       	ldi	r18, 0xFF	; 255
 154:	85 ea       	ldi	r24, 0xA5	; 165
 156:	9e e0       	ldi	r25, 0x0E	; 14
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	80 40       	sbci	r24, 0x00	; 0
 15c:	90 40       	sbci	r25, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <A1RedToGreen+0xc>
 160:	00 c0       	rjmp	.+0      	; 0x162 <A1RedToGreen+0x16>
 162:	00 00       	nop
	_delay_ms(300);
	sv1(A1Red | A1Yellow | A2Red);
 164:	82 e3       	ldi	r24, 0x32	; 50
 166:	0e 94 40 00 	call	0x80	; 0x80 <sv1>
 16a:	2f ef       	ldi	r18, 0xFF	; 255
 16c:	85 ea       	ldi	r24, 0xA5	; 165
 16e:	9e e0       	ldi	r25, 0x0E	; 14
 170:	21 50       	subi	r18, 0x01	; 1
 172:	80 40       	sbci	r24, 0x00	; 0
 174:	90 40       	sbci	r25, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <A1RedToGreen+0x24>
 178:	00 c0       	rjmp	.+0      	; 0x17a <A1RedToGreen+0x2e>
 17a:	00 00       	nop
	_delay_ms(300);
	sv1(A1Green | A2Red);
 17c:	81 e2       	ldi	r24, 0x21	; 33
 17e:	0e 94 40 00 	call	0x80	; 0x80 <sv1>
 182:	08 95       	ret

00000184 <A1Phase>:
}

void A1Phase()
{
	A1RedToGreen();
 184:	0e 94 a6 00 	call	0x14c	; 0x14c <A1RedToGreen>
 188:	2f ef       	ldi	r18, 0xFF	; 255
 18a:	83 ed       	ldi	r24, 0xD3	; 211
 18c:	90 e3       	ldi	r25, 0x30	; 48
 18e:	21 50       	subi	r18, 0x01	; 1
 190:	80 40       	sbci	r24, 0x00	; 0
 192:	90 40       	sbci	r25, 0x00	; 0
 194:	e1 f7       	brne	.-8      	; 0x18e <A1Phase+0xa>
 196:	00 c0       	rjmp	.+0      	; 0x198 <A1Phase+0x14>
 198:	00 00       	nop
	_delay_ms(1000);
	A1GreenToRed();
 19a:	0e 94 8a 00 	call	0x114	; 0x114 <A1GreenToRed>
 19e:	2f ef       	ldi	r18, 0xFF	; 255
 1a0:	83 ed       	ldi	r24, 0xD3	; 211
 1a2:	90 e3       	ldi	r25, 0x30	; 48
 1a4:	21 50       	subi	r18, 0x01	; 1
 1a6:	80 40       	sbci	r24, 0x00	; 0
 1a8:	90 40       	sbci	r25, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <A1Phase+0x20>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <A1Phase+0x2a>
 1ae:	00 00       	nop
 1b0:	08 95       	ret

000001b2 <A2Phase>:
	_delay_ms(1000);
}

void A2Phase()
{
	A2RedToGreen();
 1b2:	0e 94 6e 00 	call	0xdc	; 0xdc <A2RedToGreen>
 1b6:	2f ef       	ldi	r18, 0xFF	; 255
 1b8:	83 ed       	ldi	r24, 0xD3	; 211
 1ba:	90 e3       	ldi	r25, 0x30	; 48
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <A2Phase+0xa>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <A2Phase+0x14>
 1c6:	00 00       	nop
	_delay_ms(1000);
	A2GreenToRed();
 1c8:	0e 94 52 00 	call	0xa4	; 0xa4 <A2GreenToRed>
 1cc:	2f ef       	ldi	r18, 0xFF	; 255
 1ce:	83 ed       	ldi	r24, 0xD3	; 211
 1d0:	90 e3       	ldi	r25, 0x30	; 48
 1d2:	21 50       	subi	r18, 0x01	; 1
 1d4:	80 40       	sbci	r24, 0x00	; 0
 1d6:	90 40       	sbci	r25, 0x00	; 0
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <A2Phase+0x20>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <A2Phase+0x2a>
 1dc:	00 00       	nop
 1de:	08 95       	ret

000001e0 <main>:
	_delay_ms(1000);	
}

int main(void)
{
	sv1(0b00110000);	//A1 und A2: Rot
 1e0:	80 e3       	ldi	r24, 0x30	; 48
 1e2:	0e 94 40 00 	call	0x80	; 0x80 <sv1>
	
	DDRB &= ~(1<<PD2)|(1<<PD3);
 1e6:	22 98       	cbi	0x04, 2	; 4
	PORTD |= (1<<PD2)|(1<<PD3);
 1e8:	8b b1       	in	r24, 0x0b	; 11
 1ea:	8c 60       	ori	r24, 0x0C	; 12
 1ec:	8b b9       	out	0x0b, r24	; 11
	
	EICRA |= (1<<ISC01) | (1<<ISC00);
 1ee:	e9 e6       	ldi	r30, 0x69	; 105
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	83 60       	ori	r24, 0x03	; 3
 1f6:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0)|(1<<INT1);
 1f8:	8d b3       	in	r24, 0x1d	; 29
 1fa:	83 60       	ori	r24, 0x03	; 3
 1fc:	8d bb       	out	0x1d, r24	; 29
	
	sei();
 1fe:	78 94       	sei
 200:	ff cf       	rjmp	.-2      	; 0x200 <main+0x20>

00000202 <__vector_1>:
		
	}
}

ISR (INT0_vect)
{
 202:	1f 92       	push	r1
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	2f 93       	push	r18
 20e:	3f 93       	push	r19
 210:	4f 93       	push	r20
 212:	5f 93       	push	r21
 214:	6f 93       	push	r22
 216:	7f 93       	push	r23
 218:	8f 93       	push	r24
 21a:	9f 93       	push	r25
 21c:	af 93       	push	r26
 21e:	bf 93       	push	r27
 220:	ef 93       	push	r30
 222:	ff 93       	push	r31
	//Ampel 1	
	A1Phase();
 224:	0e 94 c2 00 	call	0x184	; 0x184 <A1Phase>
 228:	2f ef       	ldi	r18, 0xFF	; 255
 22a:	83 ed       	ldi	r24, 0xD3	; 211
 22c:	90 e3       	ldi	r25, 0x30	; 48
 22e:	21 50       	subi	r18, 0x01	; 1
 230:	80 40       	sbci	r24, 0x00	; 0
 232:	90 40       	sbci	r25, 0x00	; 0
 234:	e1 f7       	brne	.-8      	; 0x22e <__vector_1+0x2c>
 236:	00 c0       	rjmp	.+0      	; 0x238 <__vector_1+0x36>
 238:	00 00       	nop
	_delay_ms(1000);
	sv1(0b00110000);	//A1 und A2: Rot
 23a:	80 e3       	ldi	r24, 0x30	; 48
 23c:	0e 94 40 00 	call	0x80	; 0x80 <sv1>
}
 240:	ff 91       	pop	r31
 242:	ef 91       	pop	r30
 244:	bf 91       	pop	r27
 246:	af 91       	pop	r26
 248:	9f 91       	pop	r25
 24a:	8f 91       	pop	r24
 24c:	7f 91       	pop	r23
 24e:	6f 91       	pop	r22
 250:	5f 91       	pop	r21
 252:	4f 91       	pop	r20
 254:	3f 91       	pop	r19
 256:	2f 91       	pop	r18
 258:	0f 90       	pop	r0
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	0f 90       	pop	r0
 25e:	1f 90       	pop	r1
 260:	18 95       	reti

00000262 <__vector_2>:

ISR (INT1_vect)
{
 262:	1f 92       	push	r1
 264:	0f 92       	push	r0
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	0f 92       	push	r0
 26a:	11 24       	eor	r1, r1
 26c:	2f 93       	push	r18
 26e:	3f 93       	push	r19
 270:	4f 93       	push	r20
 272:	5f 93       	push	r21
 274:	6f 93       	push	r22
 276:	7f 93       	push	r23
 278:	8f 93       	push	r24
 27a:	9f 93       	push	r25
 27c:	af 93       	push	r26
 27e:	bf 93       	push	r27
 280:	ef 93       	push	r30
 282:	ff 93       	push	r31
	//Ampel 2
	A2Phase();
 284:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <A2Phase>
 288:	2f ef       	ldi	r18, 0xFF	; 255
 28a:	83 ed       	ldi	r24, 0xD3	; 211
 28c:	90 e3       	ldi	r25, 0x30	; 48
 28e:	21 50       	subi	r18, 0x01	; 1
 290:	80 40       	sbci	r24, 0x00	; 0
 292:	90 40       	sbci	r25, 0x00	; 0
 294:	e1 f7       	brne	.-8      	; 0x28e <__vector_2+0x2c>
 296:	00 c0       	rjmp	.+0      	; 0x298 <__vector_2+0x36>
 298:	00 00       	nop
	_delay_ms(1000);
	sv1(0b00110000);	//A1 und A2: Rot
 29a:	80 e3       	ldi	r24, 0x30	; 48
 29c:	0e 94 40 00 	call	0x80	; 0x80 <sv1>
}
 2a0:	ff 91       	pop	r31
 2a2:	ef 91       	pop	r30
 2a4:	bf 91       	pop	r27
 2a6:	af 91       	pop	r26
 2a8:	9f 91       	pop	r25
 2aa:	8f 91       	pop	r24
 2ac:	7f 91       	pop	r23
 2ae:	6f 91       	pop	r22
 2b0:	5f 91       	pop	r21
 2b2:	4f 91       	pop	r20
 2b4:	3f 91       	pop	r19
 2b6:	2f 91       	pop	r18
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <_exit>:
 2c2:	f8 94       	cli

000002c4 <__stop_program>:
 2c4:	ff cf       	rjmp	.-2      	; 0x2c4 <__stop_program>
