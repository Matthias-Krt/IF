
Taster_Entprellen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000017e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000782  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c4  00000000  00000000  000009a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e2  00000000  00000000  00001066  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001348  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003cc  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000064  00000000  00000000  00001758  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000017bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 56 00 	call	0xac	; 0xac <main>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <led_on>:

enum button {off, on} state;

void led_on()
{
	PORTD |= 0xC0;
  90:	8b b1       	in	r24, 0x0b	; 11
  92:	80 6c       	ori	r24, 0xC0	; 192
  94:	8b b9       	out	0x0b, r24	; 11
	PORTB |= 0x3F;
  96:	85 b1       	in	r24, 0x05	; 5
  98:	8f 63       	ori	r24, 0x3F	; 63
  9a:	85 b9       	out	0x05, r24	; 5
  9c:	08 95       	ret

0000009e <led_off>:
}

void led_off()
{
	PORTD &= ~0xC0;
  9e:	8b b1       	in	r24, 0x0b	; 11
  a0:	8f 73       	andi	r24, 0x3F	; 63
  a2:	8b b9       	out	0x0b, r24	; 11
	PORTB &= ~0x3F;
  a4:	85 b1       	in	r24, 0x05	; 5
  a6:	80 7c       	andi	r24, 0xC0	; 192
  a8:	85 b9       	out	0x05, r24	; 5
  aa:	08 95       	ret

000000ac <main>:
}

int main(void)
{
	DDRD &= ~(1<<PD2);
  ac:	52 98       	cbi	0x0a, 2	; 10
	
	DDRB |= 0x3F;
  ae:	84 b1       	in	r24, 0x04	; 4
  b0:	8f 63       	ori	r24, 0x3F	; 63
  b2:	84 b9       	out	0x04, r24	; 4
	DDRD |= 0xC0;
  b4:	8a b1       	in	r24, 0x0a	; 10
  b6:	80 6c       	ori	r24, 0xC0	; 192
  b8:	8a b9       	out	0x0a, r24	; 10
	
	DDRD |= (1<<PD2);
  ba:	52 9a       	sbi	0x0a, 2	; 10
			}
			
			if (state == on)
			{
				led_on();
				state = on;
  bc:	c1 e0       	ldi	r28, 0x01	; 1
	
	DDRD |= (1<<PD2);
	
    while (1) 
    {
		if (btn_down)
  be:	4a 99       	sbic	0x09, 2	; 9
  c0:	fe cf       	rjmp	.-4      	; 0xbe <main+0x12>
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <main+0x1c>
		{
			for (uint8_t i = 0; i < 10; i++)
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <main+0x1e>
  c8:	80 e0       	ldi	r24, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	ef e9       	ldi	r30, 0x9F	; 159
  cc:	ff e0       	ldi	r31, 0x0F	; 15
  ce:	31 97       	sbiw	r30, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <main+0x22>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x28>
  d4:	00 00       	nop
			{
				_delay_ms(1);
				if (btn_down) 
  d6:	4a 99       	sbic	0x09, 2	; 9
  d8:	f5 cf       	rjmp	.-22     	; 0xc4 <main+0x18>
				{
					asm("NOP");
  da:	00 00       	nop
	
    while (1) 
    {
		if (btn_down)
		{
			for (uint8_t i = 0; i < 10; i++)
  dc:	8f 5f       	subi	r24, 0xFF	; 255
  de:	8a 30       	cpi	r24, 0x0A	; 10
  e0:	a0 f3       	brcs	.-24     	; 0xca <main+0x1e>
				} else {
					i = 0;
				}
			}
			
			if (state == on)
  e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	29 f4       	brne	.+10     	; 0xf4 <main+0x48>
			{
				led_on();
  ea:	0e 94 48 00 	call	0x90	; 0x90 <led_on>
				state = on;
  ee:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <_edata>
  f2:	06 c0       	rjmp	.+12     	; 0x100 <main+0x54>
			} else if (state == off) {
  f4:	81 11       	cpse	r24, r1
  f6:	04 c0       	rjmp	.+8      	; 0x100 <main+0x54>
				led_off();
  f8:	0e 94 4f 00 	call	0x9e	; 0x9e <led_off>
				state = off;
  fc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			}
			
			while(btn_down);
 100:	4a 9b       	sbis	0x09, 2	; 9
 102:	fe cf       	rjmp	.-4      	; 0x100 <main+0x54>
 104:	dc cf       	rjmp	.-72     	; 0xbe <main+0x12>

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
