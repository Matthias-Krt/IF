
Taster_Counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000176  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000704  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000066e  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000289  00000000  00000000  00001006  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  00001290  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000383  00000000  00000000  00001374  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000196  00000000  00000000  000016f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000188d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__vector_1>
   8:	0c 94 92 00 	jmp	0x124	; 0x124 <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  88:	0c 94 b9 00 	jmp	0x172	; 0x172 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <sv1>:
#ifndef SV1_H_
#define SV1_H_

void sv1(uint8_t ausgabe)
{
	DDRB |= 0x3F;						//Richtungsregister PORTB PB0-PB5 auf Ausgang
  90:	94 b1       	in	r25, 0x04	; 4
  92:	9f 63       	ori	r25, 0x3F	; 63
  94:	94 b9       	out	0x04, r25	; 4
	DDRD |= 0xC0;						//Richtungsregister PORTD PB6 und PB7 auf Ausgang
  96:	9a b1       	in	r25, 0x0a	; 10
  98:	90 6c       	ori	r25, 0xC0	; 192
  9a:	9a b9       	out	0x0a, r25	; 10
	
	PORTB = ausgabe;					//Ausgabe LED0-5
  9c:	85 b9       	out	0x05, r24	; 5
	
	if (ausgabe & 0x40)					//Wenn ausgabe an der Stelle 6 = 1
  9e:	86 ff       	sbrs	r24, 6
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <sv1+0x16>
	{
		PORTD |= (1<<PD6);				//LED6 = HIGH
  a2:	5e 9a       	sbi	0x0b, 6	; 11
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <sv1+0x18>
	}
	else							
	PORTD &= ~(1<<PD6);					//sonst LED6 = LOW
  a6:	5e 98       	cbi	0x0b, 6	; 11
	
	
	if (ausgabe & 0x80)						//Wenn ausgabe an der Stelle 7 = 1 
  a8:	88 23       	and	r24, r24
  aa:	14 f4       	brge	.+4      	; 0xb0 <sv1+0x20>
	{
		PORTD |= (1<<PD7);				//LED7 = HIGH
  ac:	5f 9a       	sbi	0x0b, 7	; 11
  ae:	08 95       	ret
	}
	
	else
	PORTD &= ~(1<<PD7);					//sonst LED7 = LOW
  b0:	5f 98       	cbi	0x0b, 7	; 11
  b2:	08 95       	ret

000000b4 <main>:

uint8_t count = 0;

int main(void)
{
	DDRD &= ~(1<<PD2) & ~(1<<PD3);					//PD2 = Eingang (INT0) Taster S3
  b4:	8a b1       	in	r24, 0x0a	; 10
  b6:	83 7f       	andi	r24, 0xF3	; 243
  b8:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PD2) | (1<<PD3);					//PD2: Pullup
  ba:	8b b1       	in	r24, 0x0b	; 11
  bc:	8c 60       	ori	r24, 0x0C	; 12
  be:	8b b9       	out	0x0b, r24	; 11
	
	EICRA |= (1<<ISC01) | (1<<ISC00);	//INT0: wird durch steigende Flanke ausgeloest
  c0:	e9 e6       	ldi	r30, 0x69	; 105
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	83 60       	ori	r24, 0x03	; 3
  c8:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0);					//Ext. INT0 aktivieren
  ca:	e8 9a       	sbi	0x1d, 0	; 29
	EIMSK |= (1<<INT1);
  cc:	e9 9a       	sbi	0x1d, 1	; 29
	
	sei();								//Interrupts freigeben
  ce:	78 94       	sei
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <main+0x1c>

000000d2 <__vector_1>:
	
    while (1) {}
}

ISR (INT0_vect)
{
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	2f 93       	push	r18
  de:	3f 93       	push	r19
  e0:	4f 93       	push	r20
  e2:	5f 93       	push	r21
  e4:	6f 93       	push	r22
  e6:	7f 93       	push	r23
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
  ec:	af 93       	push	r26
  ee:	bf 93       	push	r27
  f0:	ef 93       	push	r30
  f2:	ff 93       	push	r31
	count++;
  f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f8:	8f 5f       	subi	r24, 0xFF	; 255
  fa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	
	sv1(count);
  fe:	0e 94 48 00 	call	0x90	; 0x90 <sv1>
}
 102:	ff 91       	pop	r31
 104:	ef 91       	pop	r30
 106:	bf 91       	pop	r27
 108:	af 91       	pop	r26
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	7f 91       	pop	r23
 110:	6f 91       	pop	r22
 112:	5f 91       	pop	r21
 114:	4f 91       	pop	r20
 116:	3f 91       	pop	r19
 118:	2f 91       	pop	r18
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <__vector_2>:

ISR (INT1_vect)
{
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	2f 93       	push	r18
 130:	3f 93       	push	r19
 132:	4f 93       	push	r20
 134:	5f 93       	push	r21
 136:	6f 93       	push	r22
 138:	7f 93       	push	r23
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
 13e:	af 93       	push	r26
 140:	bf 93       	push	r27
 142:	ef 93       	push	r30
 144:	ff 93       	push	r31
	count = 0;
 146:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	
	sv1(count);
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	0e 94 48 00 	call	0x90	; 0x90 <sv1>
}
 150:	ff 91       	pop	r31
 152:	ef 91       	pop	r30
 154:	bf 91       	pop	r27
 156:	af 91       	pop	r26
 158:	9f 91       	pop	r25
 15a:	8f 91       	pop	r24
 15c:	7f 91       	pop	r23
 15e:	6f 91       	pop	r22
 160:	5f 91       	pop	r21
 162:	4f 91       	pop	r20
 164:	3f 91       	pop	r19
 166:	2f 91       	pop	r18
 168:	0f 90       	pop	r0
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	0f 90       	pop	r0
 16e:	1f 90       	pop	r1
 170:	18 95       	reti

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
