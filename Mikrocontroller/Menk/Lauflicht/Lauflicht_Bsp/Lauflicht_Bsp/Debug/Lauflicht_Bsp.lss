
Lauflicht_Bsp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000124  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000750  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006af  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b3  00000000  00000000  00000fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001270  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b3  00000000  00000000  000012a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000068  00000000  00000000  00001657  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000016bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <sv1>:
#ifndef SV1_H_
#define SV1_H_

void sv1(uint8_t ausgabe)
{
	DDRB |= 0x3F;						//Richtungsregister PORTB PB0-PB5 auf Ausgang
  80:	94 b1       	in	r25, 0x04	; 4
  82:	9f 63       	ori	r25, 0x3F	; 63
  84:	94 b9       	out	0x04, r25	; 4
	DDRD |= 0xC0;						//Richtungsregister PORTD PB6 und PB7 auf Ausgang
  86:	9a b1       	in	r25, 0x0a	; 10
  88:	90 6c       	ori	r25, 0xC0	; 192
  8a:	9a b9       	out	0x0a, r25	; 10
	
	PORTB = ausgabe;					//Ausgabe LED0-5
  8c:	85 b9       	out	0x05, r24	; 5
	
	if (ausgabe & 0x40)					//Wenn ausgabe an der Stelle 6 = 1
  8e:	86 ff       	sbrs	r24, 6
  90:	02 c0       	rjmp	.+4      	; 0x96 <sv1+0x16>
	{
		PORTD |= (1<<PD6);				//LED6 = HIGH
  92:	5e 9a       	sbi	0x0b, 6	; 11
  94:	01 c0       	rjmp	.+2      	; 0x98 <sv1+0x18>
	}
	else							
	PORTD &= ~(1<<PD6);					//sonst LED6 = LOW
  96:	5e 98       	cbi	0x0b, 6	; 11
	
	
	if (ausgabe & 0x80)						//Wenn ausgabe an der Stelle 7 = 1 
  98:	88 23       	and	r24, r24
  9a:	14 f4       	brge	.+4      	; 0xa0 <sv1+0x20>
	{
		PORTD |= (1<<PD7);				//LED7 = HIGH
  9c:	5f 9a       	sbi	0x0b, 7	; 11
  9e:	08 95       	ret
	}
	
	else
	PORTD &= ~(1<<PD7);					//sonst LED7 = LOW
  a0:	5f 98       	cbi	0x0b, 7	; 11
  a2:	08 95       	ret

000000a4 <main>:
#include <util/delay.h>
#include "sv1.h"


int main(void)
{
  a4:	08 e0       	ldi	r16, 0x08	; 8
  a6:	10 e0       	ldi	r17, 0x00	; 0
			sv1(i);
			wait;
		}*/
		
		//1 verschieben
		for (uint8_t i = 0x80; i; i = i >> 1)
  a8:	c0 e8       	ldi	r28, 0x80	; 128
		{
			sv1(i);
  aa:	8c 2f       	mov	r24, r28
  ac:	0e 94 40 00 	call	0x80	; 0x80 <sv1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	2f ef       	ldi	r18, 0xFF	; 255
  b2:	81 ee       	ldi	r24, 0xE1	; 225
  b4:	94 e0       	ldi	r25, 0x04	; 4
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	80 40       	sbci	r24, 0x00	; 0
  ba:	90 40       	sbci	r25, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x12>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x1c>
  c0:	00 00       	nop
			sv1(i);
			wait;
		}*/
		
		//1 verschieben
		for (uint8_t i = 0x80; i; i = i >> 1)
  c2:	c6 95       	lsr	r28
  c4:	01 50       	subi	r16, 0x01	; 1
  c6:	11 09       	sbc	r17, r1
  c8:	81 f7       	brne	.-32     	; 0xaa <main+0x6>
  ca:	ec cf       	rjmp	.-40     	; 0xa4 <main>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
